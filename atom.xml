<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaohu博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiao-hu.com.cn/"/>
  <updated>2019-11-14T07:01:01.293Z</updated>
  <id>https://xiao-hu.com.cn/</id>
  
  <author>
    <name>xiaohu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ 学习(6)——哈希表(unordered_map)</title>
    <link href="https://xiao-hu.com.cn/2019/11/14/C-%E5%AD%A6%E4%B9%A0-6-%E2%80%94%E2%80%94%E5%93%88%E5%B8%8C%E8%A1%A8-unordered-map/"/>
    <id>https://xiao-hu.com.cn/2019/11/14/C-学习-6-——哈希表-unordered-map/</id>
    <published>2019-11-14T07:01:01.000Z</published>
    <updated>2019-11-14T07:01:01.293Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>39-数组中出现次数超过一半的数字</title>
    <link href="https://xiao-hu.com.cn/2019/11/13/39-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://xiao-hu.com.cn/2019/11/13/39-数组中出现次数超过一半的数字/</id>
    <published>2019-11-13T07:55:37.913Z</published>
    <updated>2019-11-14T12:48:17.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li>法1</li></ul><p>时间复杂度：$O(n^2)$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int MoreThanHalfNum_Solution(vector&lt;int&gt; numbers) &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        int <span class="built_in">length</span>=numbers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(int <span class="built_in">i</span>=<span class="number">1</span>;<span class="built_in">i</span>&lt;<span class="built_in">length</span>;<span class="built_in">i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(int <span class="built_in">j</span>=<span class="built_in">length</span><span class="number">-2</span>;<span class="built_in">j</span>&gt;=<span class="built_in">i</span>;<span class="built_in">j</span>--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(numbers[<span class="built_in">j</span>]&gt;numbers[<span class="built_in">j</span>+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    int temp=numbers[<span class="built_in">j</span>+<span class="number">1</span>];</span><br><span class="line">                    numbers[<span class="built_in">j</span>+<span class="number">1</span>]=numbers[<span class="built_in">j</span>];</span><br><span class="line">                    numbers[<span class="built_in">j</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int times=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;<span class="built_in">length</span>;<span class="built_in">i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[<span class="built_in">i</span>]==numbers[<span class="built_in">length</span>/<span class="number">2</span>])</span><br><span class="line">                times++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(times*<span class="number">2</span>&gt;<span class="built_in">length</span>)</span><br><span class="line">            <span class="keyword">return</span>  numbers[<span class="built_in">length</span>/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>法2</li></ul><p>时间复杂度：$O(nlogn)$</p><ul><li>法3</li></ul><p>时间复杂度：$O(n)$</p><p>遍历数组时保存连个值，一个是数组中的数字，一个是出现的次数，遍历到一个数字时，如果该数字和之前保存的数字相同，则次数加一，如果该数字和之前保存的数字不同，则次数减一，如果次数为零，遍历下一个数组元素，并把次数设为一。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> length=numbers.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result=numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> times=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(times==<span class="number">0</span>)<span class="comment">//该数字已经被自减到0 肯定不是所找的数，换下一个数组元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                result=numbers[i];</span><br><span class="line">                times=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[i]==result)</span><br><span class="line">                times++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                times--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// verify whether the input is valid</span></span><br><span class="line">        times=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[j]==result)</span><br><span class="line">                times++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(times*<span class="number">2</span>&gt;length)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。&lt;/p&gt;&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;法1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;时间复杂度：$O(n^2)$&lt;/p&gt;&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int MoreThanHalfNum_Solution(vector&amp;lt;int&amp;gt; numbers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(numbers.empty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int &lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;=numbers.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;=&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;&amp;gt;=&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(numbers[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;]&amp;gt;numbers[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    int temp=numbers[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    numbers[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=numbers[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    numbers[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;]=temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int times=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(numbers[&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;]==numbers[&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                times++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(times*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  numbers[&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>38.字符串的排列</title>
    <link href="https://xiao-hu.com.cn/2019/11/12/38.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>https://xiao-hu.com.cn/2019/11/12/38.字符串的排列/</id>
    <published>2019-11-12T07:00:26.000Z</published>
    <updated>2019-11-12T08:01:54.603Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1、求得所有可能出现在第一个位置上的字符，将第一个位子上的字符与后面的交换</p><p>2、固定第一个字符，求后面字符的排列，就涉及递归的问题了</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; Permutation(<span class="built_in">string</span> str) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</span><br><span class="line">        <span class="keyword">int</span> len=str.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!len)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        Permutations(result,str,<span class="number">0</span>,len);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Permutations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;result,<span class="built_in">string</span> str,<span class="keyword">int</span> index,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(index==len)</span><br><span class="line">            &#123;</span><br><span class="line">                result.push_back(str);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;len;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=index &amp;&amp; str[i]==str[index])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                swap(str[i],str[index]);</span><br><span class="line">                Permutations(result,str,index+<span class="number">1</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。&lt;/p&gt;&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;1、求得所有可能出现在第一个位置上的字符，将第一个位子上的字符与后面的交换&lt;/p&gt;&lt;p&gt;2、固定第一个字符，求后面字符的排列，就涉及递归的问题了&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 学习（5）——多线程</title>
    <link href="https://xiao-hu.com.cn/2019/11/10/C-%E5%AD%A6%E4%B9%A0%EF%BC%885%EF%BC%89%E2%80%94%E2%80%94%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://xiao-hu.com.cn/2019/11/10/C-学习（5）——多线程/</id>
    <published>2019-11-10T02:43:09.000Z</published>
    <updated>2019-11-10T08:09:13.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h1><p>mutex是多线程编程时经常用到的，在C++11中需要包含<mutex>模块。而在该文件中还有其他和mutex协作的类和函数，使得多线程编程时非常方便。</mutex></p><h2 id="mutex类"><a href="#mutex类" class="headerlink" title="mutex类"></a>mutex类</h2><p>mutex对象是一个lockable的对象，当关键区域需要被互斥访问的时候被用来当作信号。mutex对象提供互斥的拥有权限，并且不支持递归。</p><p>实际就是mutex是用来进行线程同步的。常用的成员函数有lock()和unlock()</p><a id="more"></a><p><strong>lcok()</strong></p><p>调用该函数后，调用函数会锁定mutex，在有些情况下调用函数会阻塞。<br>1、如果mutex当前没有被任何其他线程locked，则调用线程lock这个mutex对象（从此刻到直到其成员函数unlock被调用，当前线程拥有mutex对象）。<br>2、如果mutex目前被其他线程locked，则当前线程阻塞直到mutex被其他线程unlock。<br>3、如果mutex目前被当前线程lock，则会产生死锁错误。大部分情况会崩溃，因为mutex不支持递归。</p><p><strong>unlock()</strong></p><p>unlock mutex对象，释放mutex对象的所有权。通常和lock成对使用。<br>调用该函数后，如果有其他线程因为lock同一个mutex对象而阻塞，则他们中的一个会获得mutex的所有权，从而继续执行。</p><p>不使用mutex同步的情况下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"线程"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="string">"The thread1 is running !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"线程"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="string">"The thread2 is running !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(fn1)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(fn2)</span></span>;</span><br><span class="line">t1.detach();</span><br><span class="line">t2.detach();</span><br><span class="line"></span><br><span class="line">this_thread::sleep_for(chrono::milliseconds(<span class="number">1000</span>));</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cout是标准输出的接口，所以两个线程同时输出的时候会对cout进行抢占，而两个线程并没有对cout进行同步，所以可能会出现输出错乱的情况。输出结果如下：</strong></p><p><img alt="1573373150246" data-src="/home/xiaohu/.config/Typora/typora-user-images/1573373150246.png"></p><p>使用mutex对cout进行互斥访问，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"线程"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="string">"The thread1 is running !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"线程"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="string">"The thread2 is running !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(fn1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(fn2)</span></span>;</span><br><span class="line">    t1.detach();</span><br><span class="line">    t2.detach();</span><br><span class="line"></span><br><span class="line">    this_thread::sleep_for(chrono::milliseconds(<span class="number">1000</span>));</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出比较工整了，因为我们对cout作了访问保护，当一个线程输出的时候，另一个线程是不能输出的，只有当一个线程输出完毕了，另一个线程才能输出。而这一切是通过mutex来实现的。</p><p><img alt="1573373275431" data-src="/home/xiaohu/.config/Typora/typora-user-images/1573373275431.png"></p><p><a href="https://blog.csdn.net/coolwriter/article/details/79883253" target="_blank" rel="noopener">C++多线程（一）thread类</a></p><p><a href="https://blog.csdn.net/coolwriter/article/details/79884298" target="_blank" rel="noopener">c++ 多线线程（二）-mutex</a></p><p><a href="https://www.cnblogs.com/haippy/p/3284540.html" target="_blank" rel="noopener">C++11 并发指南系列</a></p><p><a href="https://www.cnblogs.com/haippy/p/3236136.html" target="_blank" rel="noopener">C++11 并发指南二(std::thread 详解)</a></p><p><a href="https://www.cnblogs.com/haippy/p/3237213.html" target="_blank" rel="noopener">C++11 并发指南三(std::mutex 详解)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;mutex&quot;&gt;&lt;a href=&quot;#mutex&quot; class=&quot;headerlink&quot; title=&quot;mutex&quot;&gt;&lt;/a&gt;mutex&lt;/h1&gt;&lt;p&gt;mutex是多线程编程时经常用到的，在C++11中需要包含&lt;mutex&gt;模块。而在该文件中还有其他和mutex协作的类和函数，使得多线程编程时非常方便。&lt;/mutex&gt;&lt;/p&gt;&lt;h2 id=&quot;mutex类&quot;&gt;&lt;a href=&quot;#mutex类&quot; class=&quot;headerlink&quot; title=&quot;mutex类&quot;&gt;&lt;/a&gt;mutex类&lt;/h2&gt;&lt;p&gt;mutex对象是一个lockable的对象，当关键区域需要被互斥访问的时候被用来当作信号。mutex对象提供互斥的拥有权限，并且不支持递归。&lt;/p&gt;&lt;p&gt;实际就是mutex是用来进行线程同步的。常用的成员函数有lock()和unlock()&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://xiao-hu.com.cn/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>36.二叉搜索树与双向链表</title>
    <link href="https://xiao-hu.com.cn/2019/11/09/36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://xiao-hu.com.cn/2019/11/09/36-二叉搜索树与双向链表/</id>
    <published>2019-11-09T03:41:44.000Z</published>
    <updated>2019-11-12T07:00:06.380Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1、将左子树构成双链表，并返回该链表的头节点(左子树最左边的节点)</p><p>2、定位到左链表的最后一个节点(左子树最右边的节点)</p><p>3、如果左子树链表不为空，则将当前root追加到左子树链表后</p><a id="more"></a><p>4、将右子树构造成双向链表，并返回链表头结点(右子树最左边的节点)</p><p>5、如果右子树链表不为空，将右子树链表追加到当前root后</p><p>6、根据左子树链表是否为空返回的整体双向链表的头节点</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>待写！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。&lt;/p&gt;&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;1、将左子树构成双链表，并返回该链表的头节点(左子树最左边的节点)&lt;/p&gt;&lt;p&gt;2、定位到左链表的最后一个节点(左子树最右边的节点)&lt;/p&gt;&lt;p&gt;3、如果左子树链表不为空，则将当前root追加到左子树链表后&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>35.复杂链表的复制</title>
    <link href="https://xiao-hu.com.cn/2019/11/09/35-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>https://xiao-hu.com.cn/2019/11/09/35-复杂链表的复制/</id>
    <published>2019-11-09T03:23:23.000Z</published>
    <updated>2019-11-09T03:39:04.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分为三步走：</p><ol><li><p>给原来的链表的每个结点复制一个新节点并且插入到对应的后面 </p></li><li><p>利用老节点将新节点的random指针域置好</p></li><li><p>将链表还原,即拆成完整的两个链表</p></li></ol><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RandomListNode* <span class="title">Clone</span><span class="params">(RandomListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一步：复制链表结点</span></span><br><span class="line">        RandomListNode* oldnode=pHead;</span><br><span class="line">        <span class="keyword">while</span>(oldnode)</span><br><span class="line">        &#123;</span><br><span class="line">            RandomListNode* newnode = <span class="keyword">new</span> RandomListNode(oldnode-&gt;label);<span class="comment">//用老节点的值申请一个新节点</span></span><br><span class="line">            newnode-&gt;next=oldnode-&gt;next;<span class="comment">//将新节点的next链上老节点的next</span></span><br><span class="line">            oldnode-&gt;next=newnode;<span class="comment">//将新节点插在老节点后面</span></span><br><span class="line">            oldnode=oldnode-&gt;next-&gt;next;<span class="comment">//由于已经插入了新节点，因此遍历下一个老节点得走2个next</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二步：置信结点的random指针</span></span><br><span class="line">        oldnode=pHead;<span class="comment">//oldnode指向链表的开始</span></span><br><span class="line">        <span class="keyword">while</span>(oldnode)</span><br><span class="line">        &#123;</span><br><span class="line">            RandomListNode* newnode=oldnode-&gt;next;<span class="comment">//由于上面的复制，新节点紧跟在与其对应的老节点后面</span></span><br><span class="line">            <span class="keyword">if</span>(oldnode-&gt;random!=<span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//oldnode-&gt;random是老节点的random域，再指向next就是该老节点对应的新节点应该指向的对应的random域</span></span><br><span class="line">                newnode-&gt;random=oldnode-&gt;random-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            oldnode=oldnode-&gt;next-&gt;next;<span class="comment">//只走老节点(为其对应的新节点链上对应的randoum域)</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拆分新/老链表</span></span><br><span class="line">        oldnode=pHead;<span class="comment">//让oldnode指向链表开始</span></span><br><span class="line">        RandomListNode* newHead=oldnode-&gt;next;<span class="comment">//新链表的头是老链表头的下一个(之前复制了的)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(oldnode)</span><br><span class="line">        &#123;</span><br><span class="line">            RandomListNode* newnode=oldnode-&gt;next;<span class="comment">//保证newnode一直紧跟咋oldnode后面(老、新节点相对位置)</span></span><br><span class="line">            oldnode-&gt;next=newnode-&gt;next;<span class="comment">//恢复老节点的next指向</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(oldnode-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                newnode-&gt;next=oldnode-&gt;next-&gt;next;<span class="comment">//恢复新节点的next指向</span></span><br><span class="line">            &#125;</span><br><span class="line">            oldnode=oldnode-&gt;next;<span class="comment">//由于oldnode的next域上面已经恢复了，因此下一个老节点就是oldnode-&gt;next</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）&lt;/p&gt;&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;分为三步走：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;给原来的链表的每个结点复制一个新节点并且插入到对应的后面 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用老节点将新节点的random指针域置好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将链表还原,即拆成完整的两个链表&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>34.二叉树中和为某一路径</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/34-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E8%B7%AF%E5%BE%84/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/34-二叉树中和为某一路径/</id>
    <published>2019-11-08T12:58:42.000Z</published>
    <updated>2019-11-09T03:20:58.178Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p><h1 id><a href="#" class="headerlink" title=" "></a> </h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct TreeNode *left;</span></span><br><span class="line"><span class="comment">struct TreeNode *right;</span></span><br><span class="line"><span class="comment">TreeNode(int x) :</span></span><br><span class="line"><span class="comment">val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; p;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; FindPath(TreeNode* root,<span class="keyword">int</span> expectNumber) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        </span><br><span class="line">        q.push_back(root-&gt;val);</span><br><span class="line">        <span class="comment">//如果是叶结点，并且路径上结点的和等于输入的值</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">NULL</span> &amp;&amp; root-&gt;right==<span class="literal">NULL</span> &amp;&amp; root-&gt;val==expectNumber)</span><br><span class="line">            p.push_back(q);</span><br><span class="line">        <span class="comment">//如果不是叶结点，则遍历它的子结点</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val&lt;expectNumber &amp;&amp; root-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">            FindPath(root-&gt;left,expectNumber-root-&gt;val);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val!=<span class="literal">NULL</span> &amp;&amp; root-&gt;val&lt;expectNumber)</span><br><span class="line">            FindPath(root-&gt;right,expectNumber-root-&gt;val);</span><br><span class="line">        <span class="comment">//在路径上删除当前结点</span></span><br><span class="line">        q.pop_back();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>33.二叉树的后序遍历序列</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/33-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/33-二叉树的后序遍历序列/</id>
    <published>2019-11-08T11:52:44.000Z</published>
    <updated>2019-11-08T12:59:55.388Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>定义：二叉排序树 ( Binary Sort Tree)，又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树。.</li></ul><blockquote><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值 </li><li>若它的右子树不空 ，则右子树上所有结点的值均大于宫的根结点的值</li><li>它的左、右子树也分别为二叉排序树。</li></ul></blockquote><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence.size()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> _VerifySquenceOfBST(sequence,<span class="number">0</span>,sequence.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> _VerifySquenceOfBST(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=end)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> root=s[end];</span><br><span class="line">        <span class="keyword">int</span> i=start;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(s[i]&lt;root)</span><br><span class="line">            i++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> j=i;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]&lt;root)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> _VerifySquenceOfBST(s,start,i<span class="number">-1</span>) &amp;&amp; _VerifySquenceOfBST(s,i,end<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。&lt;/p&gt;&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义：二叉排序树 ( Binary Sort Tree)，又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树。.&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值 &lt;/li&gt;
&lt;li&gt;若它的右子树不空 ，则右子树上所有结点的值均大于宫的根结点的值&lt;/li&gt;
&lt;li&gt;它的左、右子树也分别为二叉排序树。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 学习（4）——栈stack</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/C-%E5%AD%A6%E4%B9%A0%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88stack/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/C-学习（4）——栈stack/</id>
    <published>2019-11-08T09:24:38.000Z</published>
    <updated>2019-11-08T09:28:50.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>1、栈(Stack)是一种线性存储结构，它具有如下特点：</li></ul><p>（1）栈中的数据元素遵守“先进后出”(First In Last Out)的原则，简称FILO结构。</p><p>（2）限定只能在栈顶进行插入和删除操作。</p><ul><li>2、栈的相关概念：</li></ul><p>（1）栈顶与栈底：允许元素插入与删除的一端称为栈顶，另一端称为栈底。</p><p>（2）压栈：栈的插入操作，叫做进栈，也称压栈、入栈。</p><a id="more"></a><p>（3）弹栈：栈的删除操作，也叫做出栈。</p><ul><li>3、栈的常用操作为：</li></ul><p>（1）弹栈，通常命名为pop</p><p>（2）压栈，通常命名为push</p><p>（3）求栈的大小</p><p>（4）判断栈是否为空</p><p>（5）获取栈顶元素的值</p><ul><li>4、栈的常见分类：</li></ul><p>（1）基于数组的栈——以数组为底层数据结构时，通常以数组头为栈底，数组头到数组尾为栈顶的生长方向</p><p>（2）基于单链表的栈——以链表为底层的数据结构时，以链表头为栈顶，便于节点的插入与删除，压栈产生的新节点将一直出现在链表的头部</p><ul><li><p>5、实例分析</p><p> 使用标准库的栈时, 应包含相关头文件，在栈中应包含头文件： #include&lt; stack &gt; 。定义：stack&lt; int &gt; s;</p></li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.empty<span class="comment">()</span>;         <span class="comment">//如果栈为空则返回true, 否则返回false;</span></span><br><span class="line">s.size<span class="comment">()</span>;          <span class="comment">//返回栈中元素的个数</span></span><br><span class="line">s.top<span class="comment">()</span>;           <span class="comment">//返回栈顶元素, 但不删除该元素</span></span><br><span class="line">s.pop<span class="comment">()</span>;           <span class="comment">//弹出栈顶元素, 但不返回其值</span></span><br><span class="line">s.push<span class="comment">()</span>;          <span class="comment">//将元素压入栈顶</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/QG-whz/p/5170418.html" target="_blank" rel="noopener">数据结构图文解析之：栈的简介及C++模板实现</a></p><p><a href="https://blog.csdn.net/zichen_ziqi/article/details/80807989" target="_blank" rel="noopener">C++数据结构——栈</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;1、栈(Stack)是一种线性存储结构，它具有如下特点：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（1）栈中的数据元素遵守“先进后出”(First In Last Out)的原则，简称FILO结构。&lt;/p&gt;&lt;p&gt;（2）限定只能在栈顶进行插入和删除操作。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;2、栈的相关概念：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（1）栈顶与栈底：允许元素插入与删除的一端称为栈顶，另一端称为栈底。&lt;/p&gt;&lt;p&gt;（2）压栈：栈的插入操作，叫做进栈，也称压栈、入栈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://xiao-hu.com.cn/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 学习（3）——set(集合容器）</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/C-%E5%AD%A6%E4%B9%A0%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94set-%E9%9B%86%E5%90%88%E5%AE%B9%E5%99%A8%EF%BC%89/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/C-学习（3）——set-集合容器）/</id>
    <published>2019-11-08T09:20:52.000Z</published>
    <updated>2019-11-08T09:24:58.409Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="set集合容器："><a href="#set集合容器：" class="headerlink" title="set集合容器："></a>set集合容器：</h1><p>实现了红黑树（Red-Black Tree）的平衡二叉检索树的数据结构，在插入元素时，它会自动调整二叉树的排列，把该元素放到适当的位置，以确保每个子树根节点的键值大于左子树所有节点的键值，而小于右子树所有节点的键值；另外，还得确保根节点的左子树的高度与有字数的高度相等，<br>这样，二叉树的高度最小，从而检索速度最快。要注意的是，它不会重复插入相同键值的元素，而采取忽略处理。</p><a id="more"></a><p>平衡二叉检索树的检索使用中序遍历算法，检索效率高于vector、deque、和list的容器。另外，采用中序遍历算法可将键值由小到大遍历出来，所以，可以理解为平衡二叉检索树在插入元素时，就会自动将元素按键值从小到大的顺序排列。</p><p>构造set集合的主要目的是为了快速检索，使用set前，需要在程序头文件中包含声明“#include&lt; set&gt;”。</p><h1 id="c-stl集合-Set-："><a href="#c-stl集合-Set-：" class="headerlink" title="c++ stl集合(Set)："></a>c++ stl集合(Set)：</h1><p>是一种包含已排序对象的关联容器。set/multiset会根据待定的排序准则，自动将元素排序。两者不同在于前者不允许元素重复，而后者允许。</p><ul><li><p>不能直接改变元素值，因为那样会打乱原本正确的顺序，要改变元素值必须先删除旧元素，则插入新元素</p></li><li><p>不提供直接存取元素的任何操作函数，只能通过迭代器进行间接存取，而且从迭代器角度来看，元素值是常数</p></li><li>元素比较动作只能用于型别相同的容器(即元素和排序准则必须相同)<h1 id="set的各成员函数列表如下"><a href="#set的各成员函数列表如下" class="headerlink" title="set的各成员函数列表如下:"></a>set的各成员函数列表如下:</h1></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">begin</span><span class="params">()</span></span>--返回指向第一个元素的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">clear</span><span class="params">()</span></span>--清除所有元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">count</span><span class="params">()</span></span>--返回某个值元素的个数</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">empty</span><span class="params">()</span></span>--如果集合为空，返回true</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">end</span><span class="params">()</span></span>--返回指向最后一个元素的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">equal_range</span><span class="params">()</span></span>--返回集合中与给定值相等的上下限的两个迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">erase</span><span class="params">()</span></span>--删除集合中的元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">find</span><span class="params">()</span></span>--返回一个指向被查找到元素的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_allocator</span><span class="params">()</span></span>--返回集合的分配器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">insert</span><span class="params">()</span></span>--在集合中插入元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">lower_bound</span><span class="params">()</span></span>--返回指向大于（或等于）某值的第一个元素的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">key_comp</span><span class="params">()</span></span>--返回一个用于元素间值比较的函数</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max_size</span><span class="params">()</span></span>--返回集合能容纳的元素的最大限值</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rbegin</span><span class="params">()</span></span>--返回指向集合中最后一个元素的反向迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rend</span><span class="params">()</span></span>--返回指向集合中第一个元素的反向迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">size</span><span class="params">()</span></span>--集合中元素的数目</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">()</span></span>--交换两个集合变量</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">upper_bound</span><span class="params">()</span></span>--返回大于某个值元素的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">value_comp</span><span class="params">()</span></span>--返回一个用于比较元素间的值的函数</span><br></pre></td></tr></table></figure><ol><li>创建set集合对象<br>创建set对象时，需要指定元素的类型，这一点和其他容器一样。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>元素的插入与中序遍历</p><p>采用inset()方法把元素插入到集合中，插入规则在默认的比较规则下，是按元素值从小到大插入，如果自己指定了比较规则函数，则按自定义比较规则函数插入。<br>使用前向迭代器对集合中序遍历，结果正好是元素排序后的结果。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第一次插入5，可以插入  </span></span><br><span class="line">    s.insert(<span class="number">1</span>);  </span><br><span class="line">    s.insert(<span class="number">6</span>);  </span><br><span class="line">    s.insert(<span class="number">3</span>);  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第二次插入5，重复元素，不会插入  </span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it; <span class="comment">//定义前向迭代器  </span></span><br><span class="line">    <span class="comment">//中序遍历集合中的所有元素  </span></span><br><span class="line">    <span class="keyword">for</span>(it = s.begin(); it != s.end(); it++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//运行结果：1 3 5 6</span></span><br></pre></td></tr></table></figure><ol><li>元素的方向遍历<br>使用反向迭代器reverse_iterator可以反向遍历集合，输出的结果正好是集合元素的反向排序结果。<br>它需要用到rbegin()和rend()两个方法，它们分别给出了反向遍历的开始位置和结束位置。 </li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第一次插入5，可以插入  </span></span><br><span class="line">    s.insert(<span class="number">1</span>);  </span><br><span class="line">    s.insert(<span class="number">6</span>);  </span><br><span class="line">    s.insert(<span class="number">3</span>);  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第二次插入5，重复元素，不会插入  </span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator rit; <span class="comment">//定义反向迭代器  </span></span><br><span class="line">    <span class="comment">//反向遍历集合中的所有元素  </span></span><br><span class="line">    <span class="keyword">for</span>(rit = s.rbegin(); rit != s.rend(); rit++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *rit &lt;&lt; <span class="string">" "</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//运行结果：6 5 3 1</span></span><br></pre></td></tr></table></figure><ol><li>元素的删除<br> 与插入元素的处理一样，集合具有高效的删除处理功能，并自动重新调整内部的红黑树的平衡。<br>删除的对象可以是某个迭代器位置上的元素、等于某键值的元素、一个区间上的元素和清空集合。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第一次插入5，可以插入  </span></span><br><span class="line">    s.insert(<span class="number">1</span>);  </span><br><span class="line">    s.insert(<span class="number">6</span>);  </span><br><span class="line">    s.insert(<span class="number">3</span>);  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第二次插入5，重复元素，不会插入  </span></span><br><span class="line">    s.erase(<span class="number">6</span>); <span class="comment">//删除键值为6的元素  </span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator rit; <span class="comment">//定义反向迭代器  </span></span><br><span class="line">    <span class="comment">//反向遍历集合中的所有元素  </span></span><br><span class="line">    <span class="keyword">for</span>(rit = s.rbegin(); rit != s.rend(); rit++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *rit &lt;&lt; <span class="string">" "</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;  </span><br><span class="line">  </span><br><span class="line">    it = s.begin();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)  </span><br><span class="line">        it = s.erase(it);   </span><br><span class="line">    <span class="keyword">for</span>(it = s.begin(); it != s.end(); it++)  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">  </span><br><span class="line">    s.clear();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">运行结果： </span></span><br><span class="line"><span class="comment">5 3 1 </span></span><br><span class="line"><span class="comment">5 </span></span><br><span class="line"><span class="comment">0     </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><p>元素的检索</p><p>使用find()方法对集合进行检索，如果找到查找的的键值，则返回该键值的迭代器位置；否则，返回集合最后一个元素后面的一个位置，即end()。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第一次插入5，可以插入  </span></span><br><span class="line">    s.insert(<span class="number">1</span>);  </span><br><span class="line">    s.insert(<span class="number">6</span>);  </span><br><span class="line">    s.insert(<span class="number">3</span>);  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第二次插入5，重复元素，不会插入  </span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;  </span><br><span class="line">    it = s.find(<span class="number">6</span>); <span class="comment">//查找键值为6的元素  </span></span><br><span class="line">    <span class="keyword">if</span>(it != s.end())  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"not find it"</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    it = s.find(<span class="number">20</span>);  </span><br><span class="line">    <span class="keyword">if</span>(it != s.end())  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"not find it"</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">运行结果： </span></span><br><span class="line"><span class="comment">6 </span></span><br><span class="line"><span class="comment">not find it    </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面这种方法也能判断一个数是否在集合中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="built_in">set</span> &lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    <span class="keyword">int</span> a;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">        s.insert(i);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);  </span><br><span class="line">        <span class="keyword">if</span>(!s.count(a)) <span class="comment">//不存在  </span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"does not exist\n"</span>);  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"exist\n"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>自定义比较函数<br> 使用insert将元素插入到集合中去的时候，集合会根据设定的比较函数奖该元素放到该放的节点上去。<br> 在定义集合的时候，如果没有指定比较函数，那么采用默认的比较函数，即按键值从小到大的顺序插入元素。但在很多情况下，需要自己编写比较函数。</p><p>编写比较函数有两种方法。</p></li></ol><p>(1)如果元素不是结构体，那么可以编写比较函数。下面的程序比较规则为按键值从大到小的顺序插入到集合中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mycomp</span>  </span></span><br><span class="line"><span class="class">&#123;</span> <span class="comment">//自定义比较函数，重载“（）”操作符  </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a, <span class="keyword">const</span> <span class="keyword">int</span> &amp;b)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(a != b)  </span><br><span class="line">            <span class="keyword">return</span> a &gt; b;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="keyword">return</span> a &gt; b;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>, mycomp&gt; s; <span class="comment">//采用比较函数mycomp  </span></span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第一次插入5，可以插入  </span></span><br><span class="line">    s.insert(<span class="number">1</span>);  </span><br><span class="line">    s.insert(<span class="number">6</span>);  </span><br><span class="line">    s.insert(<span class="number">3</span>);  </span><br><span class="line">    s.insert(<span class="number">5</span>); <span class="comment">//第二次插入5，重复元素，不会插入  </span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>,mycomp&gt;::iterator it;  </span><br><span class="line">    <span class="keyword">for</span>(it = s.begin(); it != s.end(); it++)  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">运行结果：6 5 3 1   </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>(2)如果元素是结构体，那么可以直接把比较函数写在结构体内。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Info</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="built_in">string</span> name;  </span><br><span class="line">    <span class="keyword">double</span> score;  </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Info &amp;a) <span class="keyword">const</span> <span class="comment">// 重载“&lt;”操作符，自定义排序规则  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//按score由大到小排序。如果要由小到大排序，使用“&gt;”即可。  </span></span><br><span class="line">        <span class="keyword">return</span> a.score &lt; score;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">set</span>&lt;Info&gt; s;  </span><br><span class="line">    Info info;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//插入三个元素  </span></span><br><span class="line">    info.name = <span class="string">"Jack"</span>;  </span><br><span class="line">    info.score = <span class="number">80</span>;  </span><br><span class="line">    s.insert(info);  </span><br><span class="line">    info.name = <span class="string">"Tom"</span>;  </span><br><span class="line">    info.score = <span class="number">99</span>;  </span><br><span class="line">    s.insert(info);  </span><br><span class="line">    info.name = <span class="string">"Steaven"</span>;  </span><br><span class="line">    info.score = <span class="number">60</span>;  </span><br><span class="line">    s.insert(info);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">set</span>&lt;Info&gt;::iterator it;  </span><br><span class="line">    <span class="keyword">for</span>(it = s.begin(); it != s.end(); it++)  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it).name &lt;&lt; <span class="string">" : "</span> &lt;&lt; (*it).score &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">运行结果： </span></span><br><span class="line"><span class="comment">Tom : 99 </span></span><br><span class="line"><span class="comment">Jack : 80 </span></span><br><span class="line"><span class="comment">Steaven : 60 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;set集合容器：&quot;&gt;&lt;a href=&quot;#set集合容器：&quot; class=&quot;headerlink&quot; title=&quot;set集合容器：&quot;&gt;&lt;/a&gt;set集合容器：&lt;/h1&gt;&lt;p&gt;实现了红黑树（Red-Black Tree）的平衡二叉检索树的数据结构，在插入元素时，它会自动调整二叉树的排列，把该元素放到适当的位置，以确保每个子树根节点的键值大于左子树所有节点的键值，而小于右子树所有节点的键值；另外，还得确保根节点的左子树的高度与有字数的高度相等，&lt;br&gt;这样，二叉树的高度最小，从而检索速度最快。要注意的是，它不会重复插入相同键值的元素，而采取忽略处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://xiao-hu.com.cn/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 学习（2）——队列queue</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/C-%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/C-学习（2）——队列/</id>
    <published>2019-11-08T09:01:45.000Z</published>
    <updated>2019-11-08T09:31:26.533Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>1、队列（Queue）与栈一样，是一种线性存储结构，它具有如下特点：</p><p>（1）队列中的数据元素遵循“先进先出”（First In First Out）的原则，简称FIFO结构；</p><p>（2）在队尾添加元素，在队头删除元素。</p></li><li><p>2、队列的相关概念：</p><p>（1）队头与队尾： 允许元素插入的一端称为队尾，允许元素删除的一端称为队头；</p><p>（2）入队：队列的插入操作；</p><p>（3）出队：队列的删除操作。</p></li><li><p>3、队列的操作：</p><p>（1）入队： 通常命名为push()</p><p>（2）出队： 通常命名为pop()</p><p>（3）求队列中元素个数</p><p>（4）判断队列是否为空</p><p>（5）获取队首元素</p></li><li><p>4、队列的分类：</p></li></ul><a id="more"></a><p>（1）基于数组的循环队列（循环队列）</p><p>（2）基于链表的队列（链队列）</p><ul><li><p>5、实例分析</p><p> C++队列queue模板类的定义在&lt; queue&gt;头文件中，==queue 模板类需要两个模板参数，一个是元素类型，一个容器类型，元素类型是必要的，容器类型是可选的==，默认为deque 类型。C++队列Queue是一种容器适配器，它给予程序员一种先进先出(FIFO)的数据结构。</p></li></ul><blockquote><p>那么我们如何判断队列是空队列还是已满呢？</p><p>${\color{red} 栈空:队首标志=队尾标志时，表示栈空}$</p><p>${\color{red}栈满:队尾+1 = 队首时，表示栈满}$</p></blockquote><p>使用标准库的队列时, 应包含相关头文件，在栈中应包含头文件： #include&lt; queue&gt; 。定义：queue&lt; int &gt; q;</p><p><strong>C++队列Queue类成员函数如下:</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">q</span>.empty()               如果队列为空返回true，否则返回false</span><br><span class="line"><span class="selector-tag">q</span>.size()                返回队列中元素的个数</span><br><span class="line"><span class="selector-tag">q</span>.pop()                 删除队列首元素但不返回其值</span><br><span class="line"><span class="selector-tag">q</span>.front()               返回队首元素的值，但不删除该元素</span><br><span class="line"><span class="selector-tag">q</span>.push()                在队尾压入新元素</span><br><span class="line"><span class="selector-tag">q</span>.back()                返回队列尾元素的值，但不删除该元素</span><br></pre></td></tr></table></figure><blockquote><p> 参考:</p><p> <a href="https://blog.csdn.net/zichen_ziqi/article/details/80819939" target="_blank" rel="noopener">C++数据结构——队列</a></p><p> <a href="https://www.cnblogs.com/QG-whz/p/5171123.html" target="_blank" rel="noopener">数据结构图文解析之：队列详解与C++模板实现</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、队列（Queue）与栈一样，是一种线性存储结构，它具有如下特点：&lt;/p&gt;
&lt;p&gt;（1）队列中的数据元素遵循“先进先出”（First In First Out）的原则，简称FIFO结构；&lt;/p&gt;
&lt;p&gt;（2）在队尾添加元素，在队头删除元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、队列的相关概念：&lt;/p&gt;
&lt;p&gt;（1）队头与队尾： 允许元素插入的一端称为队尾，允许元素删除的一端称为队头；&lt;/p&gt;
&lt;p&gt;（2）入队：队列的插入操作；&lt;/p&gt;
&lt;p&gt;（3）出队：队列的删除操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、队列的操作：&lt;/p&gt;
&lt;p&gt;（1）入队： 通常命名为push()&lt;/p&gt;
&lt;p&gt;（2）出队： 通常命名为pop()&lt;/p&gt;
&lt;p&gt;（3）求队列中元素个数&lt;/p&gt;
&lt;p&gt;（4）判断队列是否为空&lt;/p&gt;
&lt;p&gt;（5）获取队首元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4、队列的分类：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://xiao-hu.com.cn/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>32.从上到下打印二叉树</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/32-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/32-从上到下打印二叉树/</id>
    <published>2019-11-08T08:52:05.000Z</published>
    <updated>2019-11-08T11:22:45.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>借助queue的层次遍历</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct TreeNode *left;</span></span><br><span class="line"><span class="comment">struct TreeNode *right;</span></span><br><span class="line"><span class="comment">TreeNode(int x) :</span></span><br><span class="line"><span class="comment">val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; PrintFromTopToBottom(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.size())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* pNode=q.front();<span class="comment">//返回队首元素的值，但不删除该元素</span></span><br><span class="line">            q.pop();<span class="comment">//删除队列首元素但不返回其值</span></span><br><span class="line">            p.push_back(pNode-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(pNode-&gt;left)</span><br><span class="line">                q.push(pNode-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(pNode-&gt;right)</span><br><span class="line">                q.push(pNode-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>31.栈的压入、弹出序列</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/31-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/31-栈的压入、弹出序列/</id>
    <published>2019-11-08T03:24:36.000Z</published>
    <updated>2019-11-08T08:49:30.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>建立一个辅助栈，把输入的第一个序列中的数字依次压入辅助栈，并按照第二个序列的顺序依次从该栈中弹出元素</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsPopOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pushV,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; popV)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;stackV;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pushV.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            stackV.push(pushV[i]);<span class="comment">//将入栈序元素入栈</span></span><br><span class="line">            <span class="keyword">while</span>(!stackV.empty() &amp;&amp; stackV.top()==popV[j])<span class="comment">//栈顶元素等于出栈序，则出栈</span></span><br><span class="line">            &#123;</span><br><span class="line">                stackV.pop();</span><br><span class="line">                j++;<span class="comment">//出栈序下标往后移动一下</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stackV.empty();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>30.包含min函数的栈</title>
    <link href="https://xiao-hu.com.cn/2019/11/08/30-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <id>https://xiao-hu.com.cn/2019/11/08/30-包含min函数的栈/</id>
    <published>2019-11-08T03:17:24.000Z</published>
    <updated>2019-11-08T07:27:13.859Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>构造一个数据栈和辅助栈，把每次的最小元素压入辅助栈</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;m_data;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;m_min;</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">         </span><br><span class="line">        m_data.push(value);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(m_min.size()==<span class="number">0</span> || value&lt;m_min.top())</span><br><span class="line">            m_min.push(value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            m_min.push(m_min.top());     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_data.pop();</span><br><span class="line">        m_min.pop();  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_min.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>29.顺时针打印矩阵</title>
    <link href="https://xiao-hu.com.cn/2019/11/05/29-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <id>https://xiao-hu.com.cn/2019/11/05/29-顺时针打印矩阵/</id>
    <published>2019-11-05T06:59:44.000Z</published>
    <updated>2019-11-05T12:05:59.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>定义2个变量保存行数和列数，定义4个变量保存边界值，然后使用4个循环就可以了</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; matrix) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">        ret.clear();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(!matrix.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> row = matrix.size();</span><br><span class="line">            <span class="keyword">int</span> col = matrix[<span class="number">0</span>].size();</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> bottom = row - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = col - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span>((top &lt;= bottom) &amp;&amp; (left &lt;= right))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ret.push_back(matrix[top][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = top + <span class="number">1</span>; i &lt;= bottom; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ret.push_back(matrix[i][right]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = right - <span class="number">1</span> ; i &gt;= left &amp;&amp; top &lt; bottom ; i--)    <span class="comment">//已经打印过了的不用再打印</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ret.push_back(matrix[bottom][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = bottom - <span class="number">1</span>; i &gt; top &amp;&amp; left &lt; right; i--)    <span class="comment">//已经打印过了的不用再打印</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ret.push_back(matrix[i][left]);</span><br><span class="line">                &#125;</span><br><span class="line">                top++;</span><br><span class="line">                right--;</span><br><span class="line">                bottom--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.&lt;/p&gt;&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;定义2个变量保存行数和列数，定义4个变量保存边界值，然后使用4个循环就可以了&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>28.对称的二叉树</title>
    <link href="https://xiao-hu.com.cn/2019/11/05/28-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://xiao-hu.com.cn/2019/11/05/28-对称的二叉树/</id>
    <published>2019-11-05T06:32:15.000Z</published>
    <updated>2019-11-05T06:59:59.111Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请实现一个函数，用来判断一颗二叉树是不是对称的。如果一颗二叉树和它的镜像一样，那么他是对称的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="剑指offer" scheme="https://xiao-hu.com.cn/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>ORB-SLAM2——Tracking</title>
    <link href="https://xiao-hu.com.cn/2019/11/04/ORB-SLAM2%E2%80%94%E2%80%94Tracking/"/>
    <id>https://xiao-hu.com.cn/2019/11/04/ORB-SLAM2——Tracking/</id>
    <published>2019-11-04T12:59:45.000Z</published>
    <updated>2019-11-14T07:11:01.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h1><p>作为ORB-SLAM2里三大线程中的第一个，Tracking线程接收传感器（摄像头）传来的每一帧，并将处理的关键帧传递给LocalMapping线程。Tracking线程其实是系统里的主线程，通过反复调用Track函数进行。<br>Tracking模块主要作用：</p><ul><li>单目地图的初始化</li><li>当前帧的位姿估计</li><li>当前帧的局部地图跟踪</li><li>生成候选关键帧</li></ul><a id="more"></a><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191104210725639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjkwNTE0MQ==,size_16,color_FFFFFF,t_70"><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191114105531451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjkwNTE0MQ==,size_16,color_FFFFFF,t_70"></p><h1 id="System-TrackMonocular"><a href="#System-TrackMonocular" class="headerlink" title="System::TrackMonocular"></a>System::TrackMonocular</h1><p>将图片传给slam系统<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat System::TrackMonocular(<span class="keyword">const</span> cv::Mat &amp;im, <span class="keyword">const</span> <span class="keyword">double</span> &amp;timestamp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(mSensor!=MONOCULAR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"ERROR: you called TrackMonocular but input sensor was not set to Monocular."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check mode change</span></span><br><span class="line">    &#123;</span><br><span class="line">        unique_lock&lt;mutex&gt; lock(mMutexMode);</span><br><span class="line">        <span class="keyword">if</span>(mbActivateLocalizationMode)</span><br><span class="line">        &#123;</span><br><span class="line">            mpLocalMapper-&gt;RequestStop();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Wait until Local Mapping has effectively stopped</span></span><br><span class="line">            <span class="keyword">while</span>(!mpLocalMapper-&gt;isStopped())</span><br><span class="line">            &#123;</span><br><span class="line">                usleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mpTracker-&gt;InformOnlyTracking(<span class="literal">true</span>);</span><br><span class="line">            mbActivateLocalizationMode = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mbDeactivateLocalizationMode)</span><br><span class="line">        &#123;</span><br><span class="line">            mpTracker-&gt;InformOnlyTracking(<span class="literal">false</span>);</span><br><span class="line">            mpLocalMapper-&gt;Release();</span><br><span class="line">            mbDeactivateLocalizationMode = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check reset</span></span><br><span class="line">    &#123;</span><br><span class="line">    unique_lock&lt;mutex&gt; lock(mMutexReset);</span><br><span class="line">    <span class="keyword">if</span>(mbReset)</span><br><span class="line">    &#123;</span><br><span class="line">        mpTracker-&gt;Reset();</span><br><span class="line">        mbReset = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv::Mat Tcw = mpTracker-&gt;GrabImageMonocular(im,timestamp);</span><br><span class="line"></span><br><span class="line">    unique_lock&lt;mutex&gt; lock2(mMutexState);</span><br><span class="line">    mTrackingState = mpTracker-&gt;mState;</span><br><span class="line">    mTrackedMapPoints = mpTracker-&gt;mCurrentFrame.mvpMapPoints;</span><br><span class="line">    mTrackedKeyPointsUn = mpTracker-&gt;mCurrentFrame.mvKeysUn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Tcw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Tracking-GrabImageMonocular"><a href="#Tracking-GrabImageMonocular" class="headerlink" title="Tracking::GrabImageMonocular"></a>Tracking::GrabImageMonocular</h1><p>将RGB图像化为灰度图像，之后Frame() 建立新帧，提取特征点。数据流以Frame的形式进入Track()函数，输出世界坐标系到该帧相机坐标系的变换矩阵（注意此时返回的变换矩阵是tracking的位姿估计）。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat Tracking::GrabImageMonocular(<span class="keyword">const</span> cv::Mat &amp;im, <span class="keyword">const</span> <span class="keyword">double</span> &amp;timestamp)</span><br><span class="line">&#123;</span><br><span class="line">    mImGray = im;</span><br><span class="line">    <span class="comment">// 步骤1：将RGB或RGBA图像转为灰度图像</span></span><br><span class="line">    <span class="keyword">if</span>(mImGray.channels()==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mbRGB)</span><br><span class="line">            cvtColor(mImGray,mImGray,CV_RGB2GRAY);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cvtColor(mImGray,mImGray,CV_BGR2GRAY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mImGray.channels()==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mbRGB)</span><br><span class="line">            cvtColor(mImGray,mImGray,CV_RGBA2GRAY);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cvtColor(mImGray,mImGray,CV_BGRA2GRAY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 步骤2：构造Frame</span></span><br><span class="line">    <span class="keyword">if</span>(mState==NOT_INITIALIZED || mState==NO_IMAGES_YET)<span class="comment">// 没有成功初始化的前一个状态就是NO_IMAGES_YET</span></span><br><span class="line">        mCurrentFrame = Frame(mImGray,timestamp,mpIniORBextractor,mpORBVocabulary,mK,mDistCoef,mbf,mThDepth);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mCurrentFrame = Frame(mImGray,timestamp,mpORBextractorLeft,mpORBVocabulary,mK,mDistCoef,mbf,mThDepth);</span><br><span class="line"></span><br><span class="line">    Track();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mCurrentFrame.mTcw.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Frame-Frame"><a href="#Frame-Frame" class="headerlink" title="Frame::Frame"></a>Frame::Frame</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Frame::Frame(<span class="keyword">const</span> cv::Mat &amp;imGray, <span class="keyword">const</span> <span class="keyword">double</span> &amp;timeStamp, ORBextractor* extractor,ORBVocabulary* voc, cv::Mat &amp;K, cv::Mat &amp;distCoef, <span class="keyword">const</span> <span class="keyword">float</span> &amp;bf, <span class="keyword">const</span> <span class="keyword">float</span> &amp;thDepth)</span><br><span class="line">    :mpORBvocabulary(voc),mpORBextractorLeft(extractor),mpORBextractorRight(<span class="keyword">static_cast</span>&lt;ORBextractor*&gt;(<span class="literal">NULL</span>)),</span><br><span class="line">     mTimeStamp(timeStamp), mK(K.clone()),mDistCoef(distCoef.clone()), mbf(bf), mThDepth(thDepth)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Frame ID</span></span><br><span class="line">    mnId=nNextId++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scale Level Info</span></span><br><span class="line">    mnScaleLevels = mpORBextractorLeft-&gt;GetLevels();</span><br><span class="line">    mfScaleFactor = mpORBextractorLeft-&gt;GetScaleFactor();</span><br><span class="line">    mfLogScaleFactor = <span class="built_in">log</span>(mfScaleFactor);</span><br><span class="line">    mvScaleFactors = mpORBextractorLeft-&gt;GetScaleFactors();</span><br><span class="line">    mvInvScaleFactors = mpORBextractorLeft-&gt;GetInverseScaleFactors();</span><br><span class="line">    mvLevelSigma2 = mpORBextractorLeft-&gt;GetScaleSigmaSquares();</span><br><span class="line">    mvInvLevelSigma2 = mpORBextractorLeft-&gt;GetInverseScaleSigmaSquares();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ORB extraction</span></span><br><span class="line">    ExtractORB(<span class="number">0</span>,imGray);</span><br><span class="line"></span><br><span class="line">    N = mvKeys.size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mvKeys.empty())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    UndistortKeyPoints();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set no stereo information</span></span><br><span class="line">    mvuRight = <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N,<span class="number">-1</span>);</span><br><span class="line">    mvDepth = <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    mvpMapPoints = <span class="built_in">vector</span>&lt;MapPoint*&gt;(N,<span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>));</span><br><span class="line">    mvbOutlier = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(N,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is done only for the first Frame (or after a change in the calibration)</span></span><br><span class="line">    <span class="keyword">if</span>(mbInitialComputations)</span><br><span class="line">    &#123;</span><br><span class="line">        ComputeImageBounds(imGray);</span><br><span class="line"></span><br><span class="line">        mfGridElementWidthInv=<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(FRAME_GRID_COLS)/<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(mnMaxX-mnMinX);</span><br><span class="line">        mfGridElementHeightInv=<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(FRAME_GRID_ROWS)/<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(mnMaxY-mnMinY);</span><br><span class="line"></span><br><span class="line">        fx = K.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        fy = K.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        cx = K.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        cy = K.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        invfx = <span class="number">1.0f</span>/fx;</span><br><span class="line">        invfy = <span class="number">1.0f</span>/fy;</span><br><span class="line"></span><br><span class="line">        mbInitialComputations=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mb = mbf/fx;</span><br><span class="line"></span><br><span class="line">    AssignFeaturesToGrid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="void-Tracking-Track"><a href="#void-Tracking-Track" class="headerlink" title="void Tracking::Track()"></a>void Tracking::Track()</h1><ol><li><p>判断tracking状态：如果是未初始化（NOT_INITIALIZED），则对单目和非单目分别执行MonocularInitialization()、StereoInitialization()进行初始化，并更新地图视图。</p></li><li><p>对于初始化成功的，接下来进行跟踪ORB-SLAM中关于跟踪状态有两种选择（由mbOnlyTracking判断）</p><p>（1）只进行跟踪不建图</p><p>（2）同时跟踪和建图：</p></li></ol><p>初始化之后ORB-SLAM有三种跟踪模型可供选择</p><ul><li><p>a.TrackWithMotionModel(); 运动模型：根据运动模型估计当前帧位姿——根据匀速运动模型对上一帧的地图点进行跟踪——优化位姿。</p></li><li><p>b.TrackReferenceKeyFrame(); 关键帧模型：BoW搜索当前帧与参考帧的匹配点——将上一帧的位姿作为当前帧的初始值——通过优化3D-2D的重投影误差来获得位姿。</p></li><li><p>c.Relocalization()；重定位模型：计算当前帧的BoW——检测满足重定位条件的候选帧——通过BoW搜索当前帧与候选帧的匹配点——大于15个点就进行PnP位姿估计——优化。</p></li></ul><p>这三个模型的选择方法：</p><p>首先假设相机恒速（即Rt和上一帧相同），然后计算匹配点数（如果匹配足够多则认为跟踪成功），如果匹配点数目较少，说明恒速模型失效，则选择参考帧模型（即特征匹配，PnP求解），如果参考帧模型同样不能进行跟踪，说明两帧键没有相关性，这时需要进行重定位，即和已经产生的关键帧中进行匹配（看看是否到了之前已经到过的地方）确定相机位姿，如果重定位仍然不能成功，则说明跟踪彻底丢失，要么等待相机回转，要不进行重置。</p><h2 id="初始化部分"><a href="#初始化部分" class="headerlink" title="初始化部分"></a>初始化部分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Tracking::Track()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(mState==NO_IMAGES_YET)</span><br><span class="line">    &#123;</span><br><span class="line">        mState = NOT_INITIALIZED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLastProcessedState=mState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get Map Mutex -&gt; Map cannot be changed</span></span><br><span class="line">    unique_lock&lt;mutex&gt; lock(mpMap-&gt;mMutexMapUpdate);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mState==NOT_INITIALIZED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mSensor==System::STEREO || mSensor==System::RGBD)</span><br><span class="line">            StereoInitialization();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            MonocularInitialization();</span><br><span class="line"></span><br><span class="line">        mpFrameDrawer-&gt;Update(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mState!=OK)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Tracking-MonocularInitialization"><a href="#Tracking-MonocularInitialization" class="headerlink" title="Tracking::MonocularInitialization()"></a>Tracking::MonocularInitialization()</h3><p>并行地计算基础矩阵和单应性矩阵，选取其中一个模型，恢复出最开始两帧之间的相对姿态以及点云，得到初始两帧的匹配、相对运动、初始MapPoints</p><ol><li>当第一次进入该方法的时候，没有先前的帧数据，将当前帧保存为初始帧和最后一帧，并初始化一个初始化器。</li><li>第二次进入该方法的时候，已经有初始化器了。 </li><li>利用ORB匹配器，对当前帧和初始帧进行匹配，对应关系小于100个时失败。 </li><li>利用八点法的对极约束，启动两个线程分别计算单应矩阵和基础矩阵，并通过score判断用单应矩阵回复运动轨迹还是使用基础矩阵回复运动轨迹。 </li><li>将初始帧和当前帧创建为关键帧，并创建地图点MapPoint </li><li>通过全局BundleAdjustment优化相机位姿和关键点坐标 </li><li>设置单位深度并缩放初试基线和地图点。 </li><li>其他变量的初始化。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Tracking::MonocularInitialization()<span class="comment">//单目初始化</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果单目初始器还没有被创建，则创建单目初始器</span></span><br><span class="line">    <span class="keyword">if</span>(!mpInitializer)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Set Reference Frame</span></span><br><span class="line">        <span class="comment">// 单目初始帧的特征点数必须大于100</span></span><br><span class="line">        <span class="keyword">if</span>(mCurrentFrame.mvKeys.size()&gt;<span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 步骤1：得到用于初始化的第一帧，初始化需要两帧</span></span><br><span class="line">            mInitialFrame = Frame(mCurrentFrame);</span><br><span class="line">            <span class="comment">// 记录最后的一帧</span></span><br><span class="line">            mLastFrame = Frame(mCurrentFrame);</span><br><span class="line">            <span class="comment">// mvbPrevMatched最大的情况就是所有特征点都被跟踪上</span></span><br><span class="line">            mvbPrevMatched.resize(mCurrentFrame.mvKeysUn.size());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;mCurrentFrame.mvKeysUn.size(); i++)</span><br><span class="line">                mvbPrevMatched[i]=mCurrentFrame.mvKeysUn[i].pt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mpInitializer)</span><br><span class="line">                <span class="keyword">delete</span> mpInitializer;</span><br><span class="line">            <span class="comment">// 由当前帧构造初始器 sigma:1.0 iterations:200</span></span><br><span class="line">            mpInitializer =  <span class="keyword">new</span> Initializer(mCurrentFrame,<span class="number">1.0</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            fill(mvIniMatches.begin(),mvIniMatches.end(),<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">//如果是第二次进入，已经创建了初始器</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Try to initialize</span></span><br><span class="line">        <span class="comment">// 步骤2：如果当前帧特征点数大于100，则得到用于单目初始化的第二帧</span></span><br><span class="line">        <span class="comment">// 如果当前帧特征点太少，重新构造初始器</span></span><br><span class="line">        <span class="comment">// 因此只有连续两帧的特征点个数都大于100时，才能继续进行初始化过程</span></span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">int</span>)mCurrentFrame.mvKeys.size()&lt;=<span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> mpInitializer;</span><br><span class="line">            mpInitializer = <span class="keyword">static_cast</span>&lt;Initializer*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">            fill(mvIniMatches.begin(),mvIniMatches.end(),<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find correspondences</span></span><br><span class="line">        <span class="comment">// 步骤3：在mInitialFrame与mCurrentFrame中找匹配的特征点对</span></span><br><span class="line">        <span class="comment">// mvbPrevMatched为前一帧的特征点，存储了mInitialFrame中哪些点将进行接下来的匹配</span></span><br><span class="line">        <span class="comment">// mvIniMatches存储mInitialFrame,mCurrentFrame之间匹配的特征点</span></span><br><span class="line">        <span class="function">ORBmatcher <span class="title">matcher</span><span class="params">(<span class="number">0.9</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> nmatches = matcher.SearchForInitialization(mInitialFrame,mCurrentFrame,mvbPrevMatched,mvIniMatches,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if there are enough correspondences</span></span><br><span class="line">        <span class="comment">// 步骤4：如果初始化的两帧之间的匹配点太少，重新初始</span></span><br><span class="line">        <span class="keyword">if</span>(nmatches&lt;<span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> mpInitializer;</span><br><span class="line">            mpInitializer = <span class="keyword">static_cast</span>&lt;Initializer*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cv::Mat Rcw; <span class="comment">// Current Camera Rotation</span></span><br><span class="line">        cv::Mat tcw; <span class="comment">// Current Camera Translation</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vbTriangulated; <span class="comment">// Triangulated Correspondences (mvIniMatches)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤5：通过H模型或F模型进行单目初始化，得到两帧间相对运动、初始MapPoints</span></span><br><span class="line">        <span class="keyword">if</span>(mpInitializer-&gt;Initialize(mCurrentFrame, mvIniMatches, Rcw, tcw, mvIniP3D, vbTriangulated))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 步骤6：删除那些无法进行三角化的匹配点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>, iend=mvIniMatches.size(); i&lt;iend;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mvIniMatches[i]&gt;=<span class="number">0</span> &amp;&amp; !vbTriangulated[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    mvIniMatches[i]=<span class="number">-1</span>;</span><br><span class="line">                    nmatches--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set Frame Poses</span></span><br><span class="line">            <span class="comment">// 将初始化的第一帧作为世界坐标系，因此第一帧变换矩阵为单位矩阵</span></span><br><span class="line">            mInitialFrame.SetPose(cv::Mat::eye(<span class="number">4</span>,<span class="number">4</span>,CV_32F));</span><br><span class="line">            <span class="comment">// 由Rcw和tcw构造Tcw,并赋值给mTcw，mTcw为世界坐标系到该帧的变换矩阵</span></span><br><span class="line">            cv::Mat Tcw = cv::Mat::eye(<span class="number">4</span>,<span class="number">4</span>,CV_32F);</span><br><span class="line">            Rcw.copyTo(Tcw.rowRange(<span class="number">0</span>,<span class="number">3</span>).colRange(<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">            tcw.copyTo(Tcw.rowRange(<span class="number">0</span>,<span class="number">3</span>).col(<span class="number">3</span>));</span><br><span class="line">            mCurrentFrame.SetPose(Tcw);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 步骤6：将三角化得到的3D点包装成MapPoints</span></span><br><span class="line">            <span class="comment">// Initialize函数会得到mvIniP3D，</span></span><br><span class="line">            <span class="comment">// mvIniP3D是cv::Point3f类型的一个容器，是个存放3D点的临时变量，</span></span><br><span class="line">            <span class="comment">// CreateInitialMapMonocular将3D点包装成MapPoint类型存入KeyFrame和Map中</span></span><br><span class="line">            CreateInitialMapMonocular();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="void-Tracking-CreateInitialMapMonocular"><a href="#void-Tracking-CreateInitialMapMonocular" class="headerlink" title="void Tracking::CreateInitialMapMonocular()"></a>void Tracking::CreateInitialMapMonocular()</h4><blockquote><ol><li>当第一次进入该方法的时候，没有先前的帧数据，将当前帧保存为初始帧和最后一帧，并初始化一个初始化器。</li><li>利用ORB匹配器，对当前帧和初始帧进行匹配，对应关系小于100个时失败。</li><li>利用八点法的对极约束，启动两个线程分别计算单应矩阵和基础矩阵，并通过score判断用单应矩阵&gt;回复运动轨迹还是使用基础矩阵回复运动轨迹。  </li><li>将初始帧和当前帧创建为关键帧，并创建地图点MapPoint </li><li>通过全局BundleAdjustment优化相机位姿和关键点坐标 </li><li>设置单位深度并缩放初试基线和地图点。  </li><li>其他变量的初始化。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">void</span> Tracking::CreateInitialMapMonocular()</span><br><span class="line">&gt;&#123;</span><br><span class="line">&gt;<span class="comment">// 创建两帧，一个为初始帧，一个为当前帧</span></span><br><span class="line">&gt;KeyFrame* pKFini = <span class="keyword">new</span> KeyFrame(mInitialFrame,mpMap,mpKeyFrameDB);</span><br><span class="line">&gt;KeyFrame* pKFcur = <span class="keyword">new</span> KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);</span><br><span class="line">&gt;<span class="comment">// 步骤1：将初始关键帧的描述子转为BoW</span></span><br><span class="line">&gt;pKFini-&gt;ComputeBoW();</span><br><span class="line">&gt;<span class="comment">// 步骤2：将当前关键帧的描述子转为BoW</span></span><br><span class="line">&gt;pKFcur-&gt;ComputeBoW();</span><br><span class="line">&gt;<span class="comment">// Insert KFs in the map</span></span><br><span class="line">&gt;<span class="comment">// 步骤3：将关键帧插入到地图</span></span><br><span class="line">&gt;<span class="comment">// 凡是关键帧，都要插入地图</span></span><br><span class="line">&gt;mpMap-&gt;AddKeyFrame(pKFini);</span><br><span class="line">&gt;mpMap-&gt;AddKeyFrame(pKFcur);</span><br><span class="line">&gt;<span class="comment">// Create MapPoints and asscoiate to keyframes</span></span><br><span class="line">&gt;<span class="comment">// 步骤4：将3D点包装成MapPoints</span></span><br><span class="line">&gt;<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;mvIniMatches.size();i++)<span class="comment">//遍历所有匹配</span></span><br><span class="line">&gt;&#123;</span><br><span class="line"> <span class="keyword">if</span>(mvIniMatches[i]&lt;<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">  <span class="comment">//Create MapPoint.</span></span><br><span class="line">  cv::<span class="function">Mat <span class="title">worldPos</span><span class="params">(mvIniP3D[i])</span></span>;</span><br><span class="line">  <span class="comment">// 步骤4.1：用3D点构造MapPoint</span></span><br><span class="line">  MapPoint* pMP = <span class="keyword">new</span> MapPoint(worldPos,pKFcur,mpMap);</span><br><span class="line">  <span class="comment">// 步骤4.2：为该MapPoint添加属性：</span></span><br><span class="line">  <span class="comment">// a.观测到该MapPoint的关键帧</span></span><br><span class="line">  <span class="comment">// b.该MapPoint的描述子</span></span><br><span class="line">  <span class="comment">// c.该MapPoint的平均观测方向和深度范围</span></span><br><span class="line">  <span class="comment">// 步骤4.3：表示该KeyFrame的哪个特征点可以观测到哪个3D点</span></span><br><span class="line">pKFini-&gt;AddMapPoint(pMP,i);</span><br><span class="line">  pKFcur-&gt;AddMapPoint(pMP,mvIniMatches[i]);</span><br><span class="line">  <span class="comment">// a.表示该MapPoint可以被哪个KeyFrame的哪个特征点观测到</span></span><br><span class="line">  pMP-&gt;AddObservation(pKFini,i);</span><br><span class="line">  pMP-&gt;AddObservation(pKFcur,mvIniMatches[i]);</span><br><span class="line">  <span class="comment">// b.从众多观测到该MapPoint的特征点中挑选区分读最高的描述子</span></span><br><span class="line">  pMP-&gt;ComputeDistinctiveDescriptors();</span><br><span class="line"> <span class="comment">// c.更新该MapPoint平均观测方向以及观测距离的范围</span></span><br><span class="line">  pMP-&gt;UpdateNormalAndDepth();</span><br><span class="line">  <span class="comment">//Fill Current Frame structure</span></span><br><span class="line">  mCurrentFrame.mvpMapPoints[mvIniMatches[i]] = pMP;</span><br><span class="line">  mCurrentFrame.mvbOutlier[mvIniMatches[i]] = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//Add to Map</span></span><br><span class="line">  <span class="comment">// 步骤4.4：在地图中添加该MapPoint</span></span><br><span class="line">  mpMap-&gt;AddMapPoint(pMP);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">// Update Connections</span></span><br><span class="line">&gt;<span class="comment">// 步骤5：更新关键帧间的连接关系</span></span><br><span class="line">&gt;<span class="comment">// 在3D点和关键帧之间建立边，每个边有一个权重，边的权重是该关键帧与当前帧公共3D点的个数</span></span><br><span class="line">&gt;pKFini-&gt;UpdateConnections();</span><br><span class="line">&gt;pKFcur-&gt;UpdateConnections();</span><br><span class="line">&gt;<span class="comment">// Bundle Adjustment</span></span><br><span class="line">&gt;<span class="built_in">cout</span> &lt;&lt; <span class="string">"New Map created with "</span> &lt;&lt; mpMap-&gt;MapPointsInMap() &lt;&lt; <span class="string">" points"</span> &lt;&lt; <span class="built_in">endl</span>；</span><br><span class="line">&gt;<span class="comment">// 步骤5：BA优化</span></span><br><span class="line">&gt;Optimizer::GlobalBundleAdjustemnt(mpMap,<span class="number">20</span>);</span><br><span class="line">&gt;<span class="comment">// Set median depth to 1</span></span><br><span class="line">&gt;<span class="comment">// 步骤6：!!!将MapPoints的中值深度归一化到1，并归一化两帧之间变换</span></span><br><span class="line">&gt;<span class="comment">// 评估关键帧场景深度，q=2表示中值</span></span><br><span class="line">&gt;<span class="keyword">float</span> medianDepth = pKFini-&gt;ComputeSceneMedianDepth(<span class="number">2</span>);</span><br><span class="line">&gt;<span class="keyword">float</span> invMedianDepth = <span class="number">1.0f</span>/medianDepth;</span><br><span class="line">&gt;<span class="keyword">if</span>(medianDepth&lt;<span class="number">0</span> || pKFcur-&gt;TrackedMapPoints(<span class="number">1</span>)&lt;<span class="number">100</span>)</span><br><span class="line">&gt;&#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wrong initialization, reseting..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Reset();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">// Scale initial baseline</span></span><br><span class="line">&gt;cv::Mat Tc2w = pKFcur-&gt;GetPose();</span><br><span class="line">&gt;<span class="comment">// x/z y/z 将z归一化到1 </span></span><br><span class="line">&gt;Tc2w.col(<span class="number">3</span>).rowRange(<span class="number">0</span>,<span class="number">3</span>) = Tc2w.col(<span class="number">3</span>).rowRange(<span class="number">0</span>,<span class="number">3</span>)*invMedianDepth;</span><br><span class="line">&gt;pKFcur-&gt;SetPose(Tc2w);</span><br><span class="line">&gt;<span class="comment">// Scale point</span></span><br><span class="line">&gt;<span class="comment">// 把3D点的尺度也归一化到</span></span><br><span class="line">&gt;<span class="built_in">vector</span>&lt;MapPoint*&gt; vpAllMapPoints = pKFini-&gt;GetMapPointMatches();</span><br><span class="line">&gt;<span class="keyword">for</span>(<span class="keyword">size_t</span> iMP=<span class="number">0</span>; iMP&lt;vpAllMapPoints.size(); iMP++)</span><br><span class="line">&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(vpAllMapPoints[iMP])</span><br><span class="line">  &#123;</span><br><span class="line">      MapPoint* pMP = vpAllMapPoints[iMP];</span><br><span class="line">      pMP-&gt;SetWorldPos(pMP-&gt;GetWorldPos()*invMedianDepth);</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">// 这部分和SteroInitialization()相似</span></span><br><span class="line">&gt;mpLocalMapper-&gt;InsertKeyFrame(pKFini);</span><br><span class="line">&gt;mpLocalMapper-&gt;InsertKeyFrame(pKFcur);</span><br><span class="line">&gt;mCurrentFrame.SetPose(pKFcur-&gt;GetPose());</span><br><span class="line">&gt;mnLastKeyFrameId=mCurrentFrame.mnId;</span><br><span class="line">&gt;mpLastKeyFrame = pKFcur;</span><br><span class="line">&gt;mvpLocalKeyFrames.push_back(pKFcur)</span><br><span class="line">&gt;mvpLocalKeyFrames.push_back(pKFini);</span><br><span class="line">&gt;mvpLocalMapPoints=mpMap-&gt;GetAllMapPoints();</span><br><span class="line">&gt;mpReferenceKF = pKFcur;</span><br><span class="line">&gt;mCurrentFrame.mpReferenceKF = pKFcur;</span><br><span class="line">&gt;mLastFrame = Frame(mCurrentFrame);</span><br><span class="line">&gt;mpMap-&gt;SetReferenceMapPoints(mvpLocalMapPoints)</span><br><span class="line">&gt;mpMapDrawer-&gt;SetCurrentCameraPose(pKFcur-&gt;GetPose());</span><br><span class="line">&gt;mpMap-&gt;mvpKeyFrameOrigins.push_back(pKFini);</span><br><span class="line">&gt;mState=OK;<span class="comment">// 初始化成功，至此，初始化过程完成 </span></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ol><h2 id="跟踪部分"><a href="#跟踪部分" class="headerlink" title="跟踪部分"></a>跟踪部分</h2><h3 id="跟踪步骤1"><a href="#跟踪步骤1" class="headerlink" title="跟踪步骤1"></a>跟踪步骤1</h3><ul><li>局部地图激活(!mbOnlyTracking)：如果(mState==OK)，CheckReplacedInLastFrame()首先更新上一帧被替换的MapPoints，然后如果特征点匹配太少，需要匹配参考关键帧bOK = TrackReferenceKeyFrame()，否则根据匀速运动模型匹配bOK = TrackWithMotionModel()。特殊情况初始化跟踪失败需要重定位bOK = Relocalization();  </li><li>局部地图不工作，只跟踪当前地图中地图点：<blockquote><p>1.if :(mState==LOST)，需要重定位Relocalization()。<br>2.else: 当匹配特征点不够多，小于10个，使用运动模型和重定位计算两种相机位姿，如果重定位失败，保持VO结果，否则更相信重定位结果。</p></blockquote></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span><span class="comment">//步骤2：跟踪</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// System is initialized. Track Frame.</span></span><br><span class="line">    <span class="comment">// bOK为临时变量，用于表示每个函数是否执行成功</span></span><br><span class="line">    <span class="keyword">bool</span> bOK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initial camera pose estimation using motion model or relocalization (if tracking is lost)</span></span><br><span class="line">    <span class="comment">// 在viewer中有个开关menuLocalizationMode，有它控制是否ActivateLocalizationMode，并最终管控mbOnlyTracking</span></span><br><span class="line">    <span class="comment">// mbOnlyTracking等于false表示正常VO模式（有地图更新），mbOnlyTracking等于true表示用户手动选择定位模式</span></span><br><span class="line">    <span class="keyword">if</span>(!mbOnlyTracking)<span class="comment">//mbOnlyTracking==false</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Local Mapping is activated. This is the normal behaviour, unless</span></span><br><span class="line">        <span class="comment">// you explicitly activate the "only tracking" mode.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正常初始化成功</span></span><br><span class="line">        <span class="keyword">if</span>(mState==OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Local Mapping might have changed some MapPoints tracked in last frame</span></span><br><span class="line">            <span class="comment">// 检查并更新上一帧被替换的MapPoints</span></span><br><span class="line">            <span class="comment">// 更新Fuse函数和SearchAndFuse函数替换的MapPoints</span></span><br><span class="line">            CheckReplacedInLastFrame();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 步骤2.1：跟踪上一帧或者参考帧或者重定位</span></span><br><span class="line">            <span class="comment">// 上一帧速度为0或当前帧与上一次重定位帧之间ID差大于2，跟踪关键帧</span></span><br><span class="line">            <span class="comment">// mnLastRelocFrameId上一次重定位的那一帧</span></span><br><span class="line">            <span class="keyword">if</span>(mVelocity.empty() || mCurrentFrame.mnId&lt;mnLastRelocFrameId+<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 将上一帧的位姿作为当前帧的初始位姿</span></span><br><span class="line">                <span class="comment">// 通过BoW的方式在参考帧中找当前帧特征点的匹配点</span></span><br><span class="line">                <span class="comment">// 优化每个特征点都对应3D点重投影误差即可得到位姿</span></span><br><span class="line">                bOK = TrackReferenceKeyFrame();<span class="comment">//跟踪参考帧</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 根据恒速模型设定当前帧的初始位姿</span></span><br><span class="line">                <span class="comment">// 通过投影的方式在参考帧中找当前帧特征点的匹配点</span></span><br><span class="line">                <span class="comment">// 优化每个特征点所对应3D点的投影误差即可得到位姿</span></span><br><span class="line">                <span class="comment">// 应该只要mVelocity不为空，就优先选择TrackWithMotionModel</span></span><br><span class="line">                bOK = TrackWithMotionModel();<span class="comment">//根据固定运动速度模型预测当前帧的位姿</span></span><br><span class="line">                <span class="keyword">if</span>(!bOK)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// TrackReferenceKeyFrame是跟踪参考帧，不能根据固定运动速度模型预测当前帧的位姿态，通过bow加速匹配（SearchByBow）</span></span><br><span class="line">                <span class="comment">// 最后通过优化得到优化后的位姿</span></span><br><span class="line">                    bOK = TrackReferenceKeyFrame();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//初始化失败</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// BOW搜索，PnP求解位姿</span></span><br><span class="line">            bOK = Relocalization();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//没有激活局部地图，只进行跟踪tracking</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Localization Mode: Local Mapping is deactivated</span></span><br><span class="line">        <span class="comment">// 步骤2.1：跟踪上一帧或者参考帧或者重定位</span></span><br><span class="line">        <span class="comment">// tracking跟丢了</span></span><br><span class="line">        <span class="keyword">if</span>(mState==LOST)</span><br><span class="line">        &#123;</span><br><span class="line">            bOK = Relocalization();<span class="comment">//判断重定位成功与否标志</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// mbVO是mbOnlyTracking为true时的才有的一个变量</span></span><br><span class="line">            <span class="comment">// mbVO为false表示此帧匹配了很多的MapPoints，跟踪很正常，</span></span><br><span class="line">            <span class="comment">// mbVO为true表明此帧匹配了很少的MapPoints，少于10个，要跪的节奏</span></span><br><span class="line">            <span class="keyword">if</span>(!mbVO)<span class="comment">//跟踪正常, mbVO为false则表明此帧匹配了很多的3D map点，非常好</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// In last frame we tracked enough MapPoints in the map</span></span><br><span class="line">                <span class="keyword">if</span>(!mVelocity.empty())<span class="comment">//上一帧有速度，跟踪模型</span></span><br><span class="line">                &#123;</span><br><span class="line">                    bOK = TrackWithMotionModel();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span><span class="comment">//上一帧没速度，跟踪关键帧</span></span><br><span class="line">                &#123;</span><br><span class="line">                    bOK = TrackReferenceKeyFrame();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//特征点不够多,小于10个</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// In last frame we tracked mainly "visual odometry" points.</span></span><br><span class="line">                <span class="comment">// We compute two camera poses, one from motion model and one doing relocalization.</span></span><br><span class="line">                <span class="comment">// If relocalization is sucessfull we choose that solution, otherwise we retain the "visual odometry" solution.</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 先使用运动模型和重定位计算两种相机位姿，如果重定位失败，保持VO结果</span></span><br><span class="line">                    <span class="comment">// mbVO为1，则表明此帧匹配了很少的3D map点，少于10个，要跪的节奏，既做跟踪又做定位</span></span><br><span class="line">                <span class="keyword">bool</span> bOKMM = <span class="literal">false</span>;<span class="comment">//运动模型是否成功判断标志</span></span><br><span class="line">                <span class="keyword">bool</span> bOKReloc = <span class="literal">false</span>;<span class="comment">//重定位是否成功判断标志</span></span><br><span class="line">                <span class="built_in">vector</span>&lt;MapPoint*&gt; vpMPsMM;<span class="comment">//记录地图点</span></span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vbOutMM;<span class="comment">//记录外点</span></span><br><span class="line">                cv::Mat TcwMM;<span class="comment">//变换矩阵</span></span><br><span class="line">                <span class="keyword">if</span>(!mVelocity.empty())<span class="comment">//有速度</span></span><br><span class="line">                &#123;</span><br><span class="line">                    bOKMM = TrackWithMotionModel();<span class="comment">//用运动模型追踪</span></span><br><span class="line">                    vpMPsMM = mCurrentFrame.mvpMapPoints;<span class="comment">//记录地图点</span></span><br><span class="line">                    vbOutMM = mCurrentFrame.mvbOutlier;<span class="comment">//记录外点</span></span><br><span class="line">                    TcwMM = mCurrentFrame.mTcw.clone();<span class="comment">//当前帧的变换矩阵</span></span><br><span class="line">                &#125;</span><br><span class="line">                bOKReloc = Relocalization();<span class="comment">//用重定位</span></span><br><span class="line">                <span class="comment">// 重定位没有成功，但是运动模型跟踪成功</span></span><br><span class="line">                <span class="keyword">if</span>(bOKMM &amp;&amp; !bOKReloc)</span><br><span class="line">                &#123;</span><br><span class="line">                    mCurrentFrame.SetPose(TcwMM);</span><br><span class="line">                    mCurrentFrame.mvpMapPoints = vpMPsMM;</span><br><span class="line">                    mCurrentFrame.mvbOutlier = vbOutMM;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(mbVO)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 更新当前帧的MapPoints被观测程度</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i] &amp;&amp; !mCurrentFrame.mvbOutlier[i])</span><br><span class="line">                            &#123;</span><br><span class="line">                                mCurrentFrame.mvpMapPoints[i]-&gt;IncreaseFound();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(bOKReloc)<span class="comment">// 只要重定位成功整个跟踪过程正常进行（定位与跟踪，更相信重定位）</span></span><br><span class="line">                &#123;</span><br><span class="line">                    mbVO = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bOK = bOKReloc || bOKMM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 将最新的关键帧作为reference frame</span></span><br><span class="line">    mCurrentFrame.mpReferenceKF = mpReferenceKF;</span><br></pre></td></tr></table></figure><h4 id="void-Tracking-CheckReplacedInLastFrame"><a href="#void-Tracking-CheckReplacedInLastFrame" class="headerlink" title="void Tracking::CheckReplacedInLastFrame()"></a>void Tracking::CheckReplacedInLastFrame()</h4><p>ocal Mapping线程可能会将关键帧中某些MapPoints进行替换，由于tracking中需要用到mLastFrame，这里检查并更新上一帧中被替换的MapPoints</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Tracking::CreateInitialMapMonocular()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Create KeyFrames</span></span><br><span class="line">    <span class="comment">// 创建两帧，一个为初始帧，一个为当前帧</span></span><br><span class="line">    KeyFrame* pKFini = <span class="keyword">new</span> KeyFrame(mInitialFrame,mpMap,mpKeyFrameDB);</span><br><span class="line">    KeyFrame* pKFcur = <span class="keyword">new</span> KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤1：将初始关键帧的描述子转为BoW</span></span><br><span class="line">    pKFini-&gt;ComputeBoW();</span><br><span class="line">    <span class="comment">// 步骤2：将当前关键帧的描述子转为BoW</span></span><br><span class="line">    pKFcur-&gt;ComputeBoW();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert KFs in the map</span></span><br><span class="line">    <span class="comment">// 步骤3：将关键帧插入到地图</span></span><br><span class="line">    <span class="comment">// 凡是关键帧，都要插入地图</span></span><br><span class="line">    mpMap-&gt;AddKeyFrame(pKFini);</span><br><span class="line">    mpMap-&gt;AddKeyFrame(pKFcur);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create MapPoints and asscoiate to keyframes</span></span><br><span class="line">    <span class="comment">// 步骤4：将3D点包装成MapPoints</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;mvIniMatches.size();i++)<span class="comment">//遍历所有匹配</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mvIniMatches[i]&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Create MapPoint.</span></span><br><span class="line">        cv::<span class="function">Mat <span class="title">worldPos</span><span class="params">(mvIniP3D[i])</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤4.1：用3D点构造MapPoint</span></span><br><span class="line">        MapPoint* pMP = <span class="keyword">new</span> MapPoint(worldPos,pKFcur,mpMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤4.2：为该MapPoint添加属性：</span></span><br><span class="line">        <span class="comment">// a.观测到该MapPoint的关键帧</span></span><br><span class="line">        <span class="comment">// b.该MapPoint的描述子</span></span><br><span class="line">        <span class="comment">// c.该MapPoint的平均观测方向和深度范围</span></span><br><span class="line">        <span class="comment">// 步骤4.3：表示该KeyFrame的哪个特征点可以观测到哪个3D点</span></span><br><span class="line">        pKFini-&gt;AddMapPoint(pMP,i);</span><br><span class="line">        pKFcur-&gt;AddMapPoint(pMP,mvIniMatches[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a.表示该MapPoint可以被哪个KeyFrame的哪个特征点观测到</span></span><br><span class="line">        pMP-&gt;AddObservation(pKFini,i);</span><br><span class="line">        pMP-&gt;AddObservation(pKFcur,mvIniMatches[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// b.从众多观测到该MapPoint的特征点中挑选区分读最高的描述子</span></span><br><span class="line">        pMP-&gt;ComputeDistinctiveDescriptors();</span><br><span class="line">        <span class="comment">// c.更新该MapPoint平均观测方向以及观测距离的范围</span></span><br><span class="line">        pMP-&gt;UpdateNormalAndDepth();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Fill Current Frame structure</span></span><br><span class="line">        mCurrentFrame.mvpMapPoints[mvIniMatches[i]] = pMP;</span><br><span class="line">        mCurrentFrame.mvbOutlier[mvIniMatches[i]] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Add to Map</span></span><br><span class="line">        <span class="comment">// 步骤4.4：在地图中添加该MapPoint</span></span><br><span class="line">        mpMap-&gt;AddMapPoint(pMP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update Connections</span></span><br><span class="line">    <span class="comment">// 步骤5：更新关键帧间的连接关系</span></span><br><span class="line">    <span class="comment">// 在3D点和关键帧之间建立边，每个边有一个权重，边的权重是该关键帧与当前帧公共3D点的个数</span></span><br><span class="line">    pKFini-&gt;UpdateConnections();</span><br><span class="line">    pKFcur-&gt;UpdateConnections();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bundle Adjustment</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"New Map created with "</span> &lt;&lt; mpMap-&gt;MapPointsInMap() &lt;&lt; <span class="string">" points"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 步骤5：BA优化</span></span><br><span class="line">    Optimizer::GlobalBundleAdjustemnt(mpMap,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set median depth to 1</span></span><br><span class="line">    <span class="comment">// 步骤6：!!!将MapPoints的中值深度归一化到1，并归一化两帧之间变换</span></span><br><span class="line">    <span class="comment">// 评估关键帧场景深度，q=2表示中值</span></span><br><span class="line">    <span class="keyword">float</span> medianDepth = pKFini-&gt;ComputeSceneMedianDepth(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">float</span> invMedianDepth = <span class="number">1.0f</span>/medianDepth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(medianDepth&lt;<span class="number">0</span> || pKFcur-&gt;TrackedMapPoints(<span class="number">1</span>)&lt;<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wrong initialization, reseting..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        Reset();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scale initial baseline</span></span><br><span class="line">    cv::Mat Tc2w = pKFcur-&gt;GetPose();</span><br><span class="line">    <span class="comment">// x/z y/z 将z归一化到1</span></span><br><span class="line">    Tc2w.col(<span class="number">3</span>).rowRange(<span class="number">0</span>,<span class="number">3</span>) = Tc2w.col(<span class="number">3</span>).rowRange(<span class="number">0</span>,<span class="number">3</span>)*invMedianDepth;</span><br><span class="line">    pKFcur-&gt;SetPose(Tc2w);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scale points</span></span><br><span class="line">    <span class="comment">// 把3D点的尺度也归一化到</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;MapPoint*&gt; vpAllMapPoints = pKFini-&gt;GetMapPointMatches();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> iMP=<span class="number">0</span>; iMP&lt;vpAllMapPoints.size(); iMP++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vpAllMapPoints[iMP])</span><br><span class="line">        &#123;</span><br><span class="line">            MapPoint* pMP = vpAllMapPoints[iMP];</span><br><span class="line">            pMP-&gt;SetWorldPos(pMP-&gt;GetWorldPos()*invMedianDepth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这部分和SteroInitialization()相似</span></span><br><span class="line">    mpLocalMapper-&gt;InsertKeyFrame(pKFini);</span><br><span class="line">    mpLocalMapper-&gt;InsertKeyFrame(pKFcur);</span><br><span class="line"></span><br><span class="line">    mCurrentFrame.SetPose(pKFcur-&gt;GetPose());</span><br><span class="line">    mnLastKeyFrameId=mCurrentFrame.mnId;</span><br><span class="line">    mpLastKeyFrame = pKFcur;</span><br><span class="line"></span><br><span class="line">    mvpLocalKeyFrames.push_back(pKFcur);</span><br><span class="line">    mvpLocalKeyFrames.push_back(pKFini);</span><br><span class="line">    mvpLocalMapPoints=mpMap-&gt;GetAllMapPoints();</span><br><span class="line">    mpReferenceKF = pKFcur;</span><br><span class="line">    mCurrentFrame.mpReferenceKF = pKFcur;</span><br><span class="line"></span><br><span class="line">    mLastFrame = Frame(mCurrentFrame);</span><br><span class="line"></span><br><span class="line">    mpMap-&gt;SetReferenceMapPoints(mvpLocalMapPoints);</span><br><span class="line"></span><br><span class="line">    mpMapDrawer-&gt;SetCurrentCameraPose(pKFcur-&gt;GetPose());</span><br><span class="line"></span><br><span class="line">    mpMap-&gt;mvpKeyFrameOrigins.push_back(pKFini);</span><br><span class="line"></span><br><span class="line">    mState=OK;<span class="comment">// 初始化成功，至此，初始化过程完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bool-Tracking-TrackReferenceKeyFrame"><a href="#bool-Tracking-TrackReferenceKeyFrame" class="headerlink" title="bool Tracking::TrackReferenceKeyFrame()"></a>bool Tracking::TrackReferenceKeyFrame()</h4><p>关键帧中查找BOW相近的帧，进行匹配优化位姿</p><ul><li>1.按照关键帧进行Track的方法和运动模式恢复相机运动位姿的方法接近。首先求解当前帧的BOW向量。 </li><li>2.再搜索当前帧和关键帧之间的关键点匹配关系，如果这个匹配关系小于15对的话，就Track失败了。 </li><li>3.接着将当前帧的位置假定到上一帧的位置那里 </li><li>4.并通过最小二乘法优化相机的位姿。 </li><li>5.最后依然是抛弃无用的杂点，当match数大于等于10的时候，返回true成功。 </li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Tracking::TrackReferenceKeyFrame()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Compute Bag of Words vector</span></span><br><span class="line">    <span class="comment">//mCurrentFrame.ComputeBoW()将当前帧的描述子转为BOW向量，加块匹配速度</span></span><br><span class="line">    mCurrentFrame.ComputeBoW();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We perform first an ORB matching with the reference keyframe</span></span><br><span class="line">    <span class="comment">// If enough matches are found we setup a PnP solver</span></span><br><span class="line">    <span class="function">ORBmatcher <span class="title">matcher</span><span class="params">(<span class="number">0.7</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;MapPoint*&gt; vpMapPointMatches;</span><br><span class="line">    <span class="comment">//matcher.SearchByBoW()通过特征点的BoW加快当前帧与参考帧之间的特征点匹配</span></span><br><span class="line">    <span class="keyword">int</span> nmatches = matcher.SearchByBoW(mpReferenceKF,mCurrentFrame,vpMapPointMatches);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nmatches&lt;<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    mCurrentFrame.mvpMapPoints = vpMapPointMatches;</span><br><span class="line">    <span class="comment">//mCurrentFrame.SetPose(mLastFrame.mTcw)将上一帧的位姿态作为当前帧位姿的初始值</span></span><br><span class="line">    mCurrentFrame.SetPose(mLastFrame.mTcw);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//PoseOptimization通过优化3D-2D的重投影误差来获得位姿</span></span><br><span class="line">    Optimizer::PoseOptimization(&amp;mCurrentFrame);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Discard outliers</span></span><br><span class="line">    <span class="comment">//剔除优化后的outlier匹配点（MapPoints）</span></span><br><span class="line">    <span class="keyword">int</span> nmatchesMap = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mCurrentFrame.mvbOutlier[i])</span><br><span class="line">            &#123;</span><br><span class="line">                MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];</span><br><span class="line"></span><br><span class="line">                mCurrentFrame.mvpMapPoints[i]=<span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">                mCurrentFrame.mvbOutlier[i]=<span class="literal">false</span>;</span><br><span class="line">                pMP-&gt;mbTrackInView = <span class="literal">false</span>;</span><br><span class="line">                pMP-&gt;mnLastFrameSeen = mCurrentFrame.mnId;</span><br><span class="line">                nmatches--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i]-&gt;Observations()&gt;<span class="number">0</span>)</span><br><span class="line">                nmatchesMap++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nmatchesMap&gt;=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bool-Tracking-TrackWithMotionModel"><a href="#bool-Tracking-TrackWithMotionModel" class="headerlink" title="bool Tracking::TrackWithMotionModel()"></a>bool Tracking::TrackWithMotionModel()</h4><p>假设匀速运动，用上一帧位姿和速度估计当前帧位姿。方法：上一帧地图点投影到当前帧，完成匹配。</p><ul><li><p>1.先通过上一帧的位姿和速度预测当前帧相机的位姿</p></li><li><p>2.通过PnP方法估计相机位姿，在将上一帧的地图点投影到当前固定大小范围的帧平面上，如果匹配点少，那么扩大两倍的采点范围。</p></li><li><p>3.然后进行一次BA算法，通过最小二乘法优化相机的位姿。</p></li><li><p>4.优化位姿之后，对当前帧的关键点和地图点，抛弃无用的杂点，剩下的点供下一次操作使用。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Tracking::TrackWithMotionModel()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ORBmatcher <span class="title">matcher</span><span class="params">(<span class="number">0.9</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="comment">// Update last frame pose according to its reference keyframe</span></span><br><span class="line">    <span class="comment">// Create "visual odometry" points</span></span><br><span class="line">    <span class="comment">// 步骤1：对于双目或rgbd摄像头，根据深度值为上一关键帧生成新的MapPoints</span></span><br><span class="line">    <span class="comment">// （跟踪过程中需要将当前帧与上一帧进行特征点匹配，将上一帧的MapPoints投影到当前帧可以缩小匹配范围）</span></span><br><span class="line">    <span class="comment">// 在跟踪过程中，去除outlier的MapPoint，如果不及时增加MapPoint会逐渐减少</span></span><br><span class="line">    <span class="comment">// 这个函数的功能就是补充增加RGBD和双目相机上一帧的MapPoints数</span></span><br><span class="line">    UpdateLastFrame();</span><br><span class="line">    <span class="comment">// 根据Const Velocity Model(认为这两帧之间的相对运动和之前两帧间相对运动相同)估计当前帧的位姿</span></span><br><span class="line">    mCurrentFrame.SetPose(mVelocity*mLastFrame.mTcw);<span class="comment">//当前帧位置等于mVelocity*mLastFrame.mTcw</span></span><br><span class="line"> </span><br><span class="line">    fill(mCurrentFrame.mvpMapPoints.begin(),mCurrentFrame.mvpMapPoints.end(),<span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">// Project points seen in previous frame</span></span><br><span class="line">    <span class="keyword">int</span> th;</span><br><span class="line">    <span class="keyword">if</span>(mSensor!=System::STEREO)<span class="comment">//非双目搜索范围系数设为15</span></span><br><span class="line">        th=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        th=<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 步骤2：根据匀速度模型进行对上一帧的MapPoints进行跟踪</span></span><br><span class="line">    <span class="comment">// 根据上一帧特征点对应的3D点投影的位置缩小特征点匹配范围</span></span><br><span class="line">    <span class="keyword">int</span> nmatches = matcher.SearchByProjection(mCurrentFrame,mLastFrame,th,mSensor==System::MONOCULAR);</span><br><span class="line">    <span class="comment">// If few matches, uses a wider window search</span></span><br><span class="line">    <span class="comment">// 如果跟踪的点少，则扩大搜索半径再来一次</span></span><br><span class="line">    <span class="keyword">if</span>(nmatches&lt;<span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fill(mCurrentFrame.mvpMapPoints.begin(),mCurrentFrame.mvpMapPoints.end(),<span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>));</span><br><span class="line">        nmatches = matcher.SearchByProjection(mCurrentFrame,mLastFrame,<span class="number">2</span>*th,mSensor==System::MONOCULAR); <span class="comment">// 2*th</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(nmatches&lt;<span class="number">20</span>)<span class="comment">//如果匹配点少于20，返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// Optimize frame pose with all matches</span></span><br><span class="line">    <span class="comment">// 步骤3：优化位姿</span></span><br><span class="line">    Optimizer::PoseOptimization(&amp;mCurrentFrame);</span><br><span class="line">    <span class="comment">// Discard outliers</span></span><br><span class="line">    <span class="comment">// 步骤4：优化位姿后剔除outlier的mvpMapPoints</span></span><br><span class="line">    <span class="keyword">int</span> nmatchesMap = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mCurrentFrame.mvbOutlier[i])</span><br><span class="line">            &#123;</span><br><span class="line">                MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];</span><br><span class="line">                mCurrentFrame.mvpMapPoints[i]=<span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">                mCurrentFrame.mvbOutlier[i]=<span class="literal">false</span>;</span><br><span class="line">                pMP-&gt;mbTrackInView = <span class="literal">false</span>;</span><br><span class="line">                pMP-&gt;mnLastFrameSeen = mCurrentFrame.mnId;</span><br><span class="line">                nmatches--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i]-&gt;Observations()&gt;<span class="number">0</span>)</span><br><span class="line">                nmatchesMap++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(mbOnlyTracking)<span class="comment">//如果仅跟踪</span></span><br><span class="line">    &#123;</span><br><span class="line">        mbVO = nmatchesMap&lt;<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> nmatches&gt;<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nmatchesMap&gt;=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="void-Tracking-UpdateLastFrame"><a href="#void-Tracking-UpdateLastFrame" class="headerlink" title="void Tracking::UpdateLastFrame()"></a>void Tracking::UpdateLastFrame()</h5><ul><li>1.更新最近一帧的位姿</li><li>2.对于双目或rgbd摄像头，为上一帧临时生成新的MapPoints,注意这些MapPoints不加入到Map中，在tracking的最后会删除,跟踪过程中需要将将上一帧的MapPoints投影到当前帧可以缩小匹配范围，加快当前帧与上一帧进行特征点匹配</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Tracking::UpdateLastFrame()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Update pose according to reference keyframe</span></span><br><span class="line">    <span class="comment">// 步骤1：更新最近一帧的位姿</span></span><br><span class="line">    KeyFrame* pRef = mLastFrame.mpReferenceKF;</span><br><span class="line">    cv::Mat Tlr = mlRelativeFramePoses.back();</span><br><span class="line"> </span><br><span class="line">    mLastFrame.SetPose(Tlr*pRef-&gt;GetPose()); <span class="comment">// Tlr*Trw = Tlw 1:last r:reference w:world</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 如果上一帧为关键帧，或者单目的情况，则退出</span></span><br><span class="line">    <span class="keyword">if</span>(mnLastKeyFrameId==mLastFrame.mnId || mSensor==System::MONOCULAR)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 步骤2：对于双目或rgbd摄像头，为上一帧临时生成新的MapPoints</span></span><br><span class="line">    <span class="comment">// 注意这些MapPoints不加入到Map中，在tracking的最后会删除</span></span><br><span class="line">    <span class="comment">// 跟踪过程中需要将将上一帧的MapPoints投影到当前帧可以缩小匹配范围，加快当前帧与上一帧进行特征点匹配</span></span><br><span class="line">    <span class="comment">// Create "visual odometry" MapPoints</span></span><br><span class="line">    <span class="comment">// We sort points according to their measured depth by the stereo/RGB-D sensor</span></span><br><span class="line">    <span class="comment">// 步骤2.1：得到上一帧有深度值的特征点</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">float</span>,<span class="keyword">int</span>&gt; &gt; vDepthIdx;</span><br><span class="line">    vDepthIdx.reserve(mLastFrame.N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mLastFrame.N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> z = mLastFrame.mvDepth[i];</span><br><span class="line">        <span class="keyword">if</span>(z&gt;<span class="number">0</span>)<span class="comment">//如果深度大于0</span></span><br><span class="line">        &#123;</span><br><span class="line">            vDepthIdx.push_back(make_pair(z,i));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(vDepthIdx.empty())<span class="comment">//如果没深度值则退出</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 步骤2.2：按照深度从小到大排序</span></span><br><span class="line">    sort(vDepthIdx.begin(),vDepthIdx.end());</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// We insert all close points (depth&lt;mThDepth)</span></span><br><span class="line">    <span class="comment">// If less than 100 close points, we insert the 100 closest ones.</span></span><br><span class="line">    <span class="comment">// 步骤2.3：将距离比较近的点包装成MapPoints</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> nPoints = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> j=<span class="number">0</span>; j&lt;vDepthIdx.size();j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = vDepthIdx[j].second;</span><br><span class="line">        <span class="keyword">bool</span> bCreateNew = <span class="literal">false</span>;</span><br><span class="line">        MapPoint* pMP = mLastFrame.mvpMapPoints[i];</span><br><span class="line">        <span class="keyword">if</span>(!pMP)</span><br><span class="line">            bCreateNew = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pMP-&gt;Observations()&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bCreateNew = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(bCreateNew)</span><br><span class="line">        &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 这些生成MapPoints后并没有通过：</span></span><br><span class="line">            <span class="comment">// a.AddMapPoint、</span></span><br><span class="line">            <span class="comment">// b.AddObservation、</span></span><br><span class="line">            <span class="comment">// c.ComputeDistinctiveDescriptors、</span></span><br><span class="line">            <span class="comment">// d.UpdateNormalAndDepth添加属性，</span></span><br><span class="line">            <span class="comment">// 这些MapPoint仅仅为了提高双目和RGBD的跟踪成功率</span></span><br><span class="line">            cv::Mat x3D = mLastFrame.UnprojectStereo(i);</span><br><span class="line">            MapPoint* pNewMP = <span class="keyword">new</span> MapPoint(x3D,mpMap,&amp;mLastFrame,i);</span><br><span class="line">            mLastFrame.mvpMapPoints[i]=pNewMP; <span class="comment">// 添加新的MapPoint</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 标记为临时添加的MapPoint，之后在CreateNewKeyFrame之前会全部删除</span></span><br><span class="line">            mlpTemporalPoints.push_back(pNewMP);</span><br><span class="line">            nPoints++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nPoints++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(vDepthIdx[j].first&gt;mThDepth &amp;&amp; nPoints&gt;<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bool-Tracking-Relocalization"><a href="#bool-Tracking-Relocalization" class="headerlink" title="bool Tracking::Relocalization()"></a>bool Tracking::Relocalization()</h4><p>重定位，从之前的关键帧中找出与当前帧之间拥有充足匹配点的候选帧，利用Ransac迭代，通过PnP求解位姿。</p><blockquote><ol><li>先计算当前帧的BOW值，并从关键帧数据库中查找候选的匹配关键帧</li><li>构建PnP求解器，标记杂点，准备好每个关键帧和当前帧的匹配点集</li><li>用PnP算法求解位姿，进行若干次P4P Ransac迭代，并使用非线性最小二乘优化，直到发现一个有充足inliers支持的相机位置</li><li>返回成功或失败</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Tracking::Relocalization()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Compute Bag of Words Vector</span></span><br><span class="line">    <span class="comment">// 步骤1：计算当前帧特征点的Bow映射</span></span><br><span class="line">    mCurrentFrame.ComputeBoW();</span><br><span class="line">    <span class="comment">// Relocalization is performed when tracking is lost当跟踪丢失执行重定位</span></span><br><span class="line">    <span class="comment">// Track Lost: Query KeyFrame Database for keyframe candidates for relocalisation</span></span><br><span class="line">    <span class="comment">// 步骤2：找到与当前帧相似的候选关键帧</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;KeyFrame*&gt; vpCandidateKFs = mpKeyFrameDB-&gt;DetectRelocalizationCandidates(&amp;mCurrentFrame);</span><br><span class="line">    <span class="keyword">if</span>(vpCandidateKFs.empty())<span class="comment">//如果没找到候选关键帧，返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nKFs = vpCandidateKFs.size();<span class="comment">//候选关键帧个数</span></span><br><span class="line">    <span class="comment">// We perform first an ORB matching with each candidat</span></span><br><span class="line">    <span class="comment">// If enough matches are found we setup a PnP solver</span></span><br><span class="line">    <span class="comment">//我们首先执行与每个候选匹配的ORB匹配</span></span><br><span class="line">    <span class="comment">//如果找到足够的匹配，我们设置一个PNP解算器</span></span><br><span class="line">    <span class="function">ORBmatcher <span class="title">matcher</span><span class="params">(<span class="number">0.75</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PnPsolver*&gt; vpPnPsolvers;</span><br><span class="line">    vpPnPsolvers.resize(nKFs);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;MapPoint*&gt; &gt; vvpMapPointMatches;</span><br><span class="line">    vvpMapPointMatches.resize(nKFs);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vbDiscarded;</span><br><span class="line">    vbDiscarded.resize(nKFs);</span><br><span class="line">    <span class="keyword">int</span> nCandidates=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nKFs; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        KeyFrame* pKF = vpCandidateKFs[i];</span><br><span class="line">        <span class="keyword">if</span>(pKF-&gt;isBad())</span><br><span class="line">            vbDiscarded[i] = <span class="literal">true</span>;<span class="comment">//去除不好的候选关键帧</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 步骤3：通过BoW进行匹配</span></span><br><span class="line">            <span class="keyword">int</span> nmatches = matcher.SearchByBoW(pKF,mCurrentFrame,vvpMapPointMatches[i]);</span><br><span class="line">            <span class="keyword">if</span>(nmatches&lt;<span class="number">15</span>)<span class="comment">//如果匹配点小于15剔除</span></span><br><span class="line">            &#123;</span><br><span class="line">                vbDiscarded[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//用pnp求解</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 初始化PnPsolver</span></span><br><span class="line">                PnPsolver* pSolver = <span class="keyword">new</span> PnPsolver(mCurrentFrame,vvpMapPointMatches[i]);</span><br><span class="line">                pSolver-&gt;SetRansacParameters(<span class="number">0.99</span>,<span class="number">10</span>,<span class="number">300</span>,<span class="number">4</span>,<span class="number">0.5</span>,<span class="number">5.991</span>);</span><br><span class="line">                vpPnPsolvers[i] = pSolver;</span><br><span class="line">                nCandidates++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Alternatively perform some iterations of P4P RANSAC可选地执行P4P RANSAC的一些迭代</span></span><br><span class="line">    <span class="comment">// Until we found a camera pose supported by enough inliers直到早到符合很多内点的相机位置</span></span><br><span class="line">    <span class="keyword">bool</span> bMatch = <span class="literal">false</span>;</span><br><span class="line">    <span class="function">ORBmatcher <span class="title">matcher2</span><span class="params">(<span class="number">0.9</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(nCandidates&gt;<span class="number">0</span> &amp;&amp; !bMatch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nKFs; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vbDiscarded[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Perform 5 Ransac Iterations</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vbInliers;</span><br><span class="line">            <span class="keyword">int</span> nInliers;</span><br><span class="line">            <span class="keyword">bool</span> bNoMore;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 步骤4：通过EPnP算法估计姿态</span></span><br><span class="line">            PnPsolver* pSolver = vpPnPsolvers[i];</span><br><span class="line">            cv::Mat Tcw = pSolver-&gt;iterate(<span class="number">5</span>,bNoMore,vbInliers,nInliers);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// If Ransac reachs max. iterations discard keyframe</span></span><br><span class="line">            <span class="keyword">if</span>(bNoMore)</span><br><span class="line">            &#123;</span><br><span class="line">                vbDiscarded[i]=<span class="literal">true</span>;</span><br><span class="line">                nCandidates--;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="comment">// If a Camera Pose is computed, optimize</span></span><br><span class="line">            <span class="keyword">if</span>(!Tcw.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                Tcw.copyTo(mCurrentFrame.mTcw);</span><br><span class="line">                <span class="built_in">set</span>&lt;MapPoint*&gt; sFound;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">int</span> np = vbInliers.size();<span class="comment">//内点个数</span></span><br><span class="line"> </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;np; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(vbInliers[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        mCurrentFrame.mvpMapPoints[j]=vvpMapPointMatches[i][j];</span><br><span class="line">                        sFound.insert(vvpMapPointMatches[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        mCurrentFrame.mvpMapPoints[j]=<span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 步骤5：通过PoseOptimization对姿态进行优化求解</span></span><br><span class="line"> </span><br><span class="line">                <span class="keyword">int</span> nGood = Optimizer::PoseOptimization(&amp;mCurrentFrame);</span><br><span class="line">                <span class="keyword">if</span>(nGood&lt;<span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> io =<span class="number">0</span>; io&lt;mCurrentFrame.N; io++)</span><br><span class="line">                    <span class="keyword">if</span>(mCurrentFrame.mvbOutlier[io])</span><br><span class="line">                        mCurrentFrame.mvpMapPoints[io]=<span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// If few inliers, search by projection in a coarse window and optimize again</span></span><br><span class="line">                <span class="comment">// 步骤6：如果内点较少，则通过投影的方式对之前未匹配的点进行匹配，再进行优化求解</span></span><br><span class="line">                <span class="keyword">if</span>(nGood&lt;<span class="number">50</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                   <span class="keyword">int</span> nadditional =matcher2.SearchByProjection(mCurrentFrame,vpCandidateKFs[i],sFound,<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">if</span>(nadditional+nGood&gt;=<span class="number">50</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        nGood = Optimizer::PoseOptimization(&amp;mCurrentFrame);<span class="comment">//优化</span></span><br><span class="line"> </span><br><span class="line">                        <span class="comment">// If many inliers but still not enough, search by projection again in a narrower window</span></span><br><span class="line"><span class="comment">//如果许多内点仍然不够，则在较窄的窗口中再次用投影搜索</span></span><br><span class="line">                        <span class="comment">// the camera has been already optimized with many points</span></span><br><span class="line">                        <span class="keyword">if</span>(nGood&gt;<span class="number">30</span> &amp;&amp; nGood&lt;<span class="number">50</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            sFound.clear();</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> ip =<span class="number">0</span>; ip&lt;mCurrentFrame.N; ip++)</span><br><span class="line">                                <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[ip])</span><br><span class="line">                                    sFound.insert(mCurrentFrame.mvpMapPoints[ip]);</span><br><span class="line">                            nadditional =matcher2.SearchByProjection(mCurrentFrame,vpCandidateKFs[i],sFound,<span class="number">3</span>,<span class="number">64</span>);</span><br><span class="line">                            <span class="comment">// Final optimization</span></span><br><span class="line">                            <span class="keyword">if</span>(nGood+nadditional&gt;=<span class="number">50</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                nGood = Optimizer::PoseOptimization(&amp;mCurrentFrame);</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> io =<span class="number">0</span>; io&lt;mCurrentFrame.N; io++)</span><br><span class="line">                                    <span class="keyword">if</span>(mCurrentFrame.mvbOutlier[io])</span><br><span class="line">                                       mCurrentFrame.mvpMapPoints[io]=<span class="literal">NULL</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// If the pose is supported by enough inliers stop ransacs and continue</span></span><br><span class="line">                <span class="keyword">if</span>(nGood&gt;=<span class="number">50</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    bMatch = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!bMatch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mnLastRelocFrameId = mCurrentFrame.mnId;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跟踪步骤2"><a href="#跟踪步骤2" class="headerlink" title="跟踪步骤2"></a>跟踪步骤2</h3><ul><li>1.如果局部地图激活(!mbOnlyTracking)跟踪局部地图bOK = TrackLocalMap()，否则在重定位后特征点足够(bOK &amp;&amp; !mbVO)也会跟踪局部地图bOK = TrackLocalMap()</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If we have an initial estimation of the camera pose and matching. Track the local map.</span></span><br><span class="line"><span class="keyword">if</span>(!mbOnlyTracking)<span class="comment">//不是只跟踪还插入关键帧，局部地图工作</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bOK)</span><br><span class="line">        bOK = TrackLocalMap();<span class="comment">//跟踪局部地图</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// mbVO true means that there are few matches to MapPoints in the map. We cannot retrieve</span></span><br><span class="line">    <span class="comment">// a local map and therefore we do not perform TrackLocalMap(). Once the system relocalizes</span></span><br><span class="line">    <span class="comment">// the camera we will use the local map again.</span></span><br><span class="line">    <span class="keyword">if</span>(bOK &amp;&amp; !mbVO) <span class="comment">// 局部地图不工作，特征点足够且重定位成功</span></span><br><span class="line">        bOK = TrackLocalMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.更新运动模型中的速度mVelocity，mVelocity = mCurrentFrame.mTcw*LastTwc</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bOK)</span><br><span class="line">    mState = OK;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    mState=LOST;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update drawer</span></span><br><span class="line">mpFrameDrawer-&gt;Update(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If tracking were good, check if we insert a keyframe</span></span><br><span class="line"><span class="keyword">if</span>(bOK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Update motion model</span></span><br><span class="line">    <span class="keyword">if</span>(!mLastFrame.mTcw.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//// 步骤2.3：更新恒速运动模型TrackWithMotionModel中的mVelocity</span></span><br><span class="line">        cv::Mat LastTwc = cv::Mat::eye(<span class="number">4</span>,<span class="number">4</span>,CV_32F);</span><br><span class="line">        mLastFrame.GetRotationInverse().copyTo(LastTwc.rowRange(<span class="number">0</span>,<span class="number">3</span>).colRange(<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">        mLastFrame.GetCameraCenter().copyTo(LastTwc.rowRange(<span class="number">0</span>,<span class="number">3</span>).col(<span class="number">3</span>));</span><br><span class="line">        mVelocity = mCurrentFrame.mTcw*LastTwc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mVelocity = cv::Mat();</span><br><span class="line"></span><br><span class="line">    mpMapDrawer-&gt;SetCurrentCameraPose(mCurrentFrame.mTcw);</span><br></pre></td></tr></table></figure><ul><li>3.清除临时的MapPoints，这些MapPoints在TrackWithMotionModel的UpdateLastFrame函数里生成（仅双目和rgbd）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Clean VO matches</span></span><br><span class="line"><span class="comment">//步骤2.4：清除UpdateLastFrame中为当前帧临时添加的MapPoints</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)</span><br><span class="line">&#123;</span><br><span class="line">    MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];</span><br><span class="line">    <span class="keyword">if</span>(pMP)</span><br><span class="line">        <span class="comment">//排除UpdateLastFrame函数中为了跟踪增加的MapPoints</span></span><br><span class="line">        <span class="keyword">if</span>(pMP-&gt;Observations()&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mCurrentFrame.mvbOutlier[i] = <span class="literal">false</span>;</span><br><span class="line">            mCurrentFrame.mvpMapPoints[i]=<span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete temporal MapPoints</span></span><br><span class="line"><span class="comment">// 步骤2.5：清除临时的MapPoints，这些MapPoints在TrackWithMotionModel的UpdateLastFrame函数里生成（仅双目和rgbd）</span></span><br><span class="line"><span class="comment">// 步骤2.4中只是在当前帧中将这些MapPoints剔除，这里从MapPoints数据库中删除</span></span><br><span class="line"><span class="comment">// 这里生成的仅仅是为了提高双目或rgbd摄像头的帧间跟踪效果，用完以后就扔了，没有添加到地图中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span>&lt;MapPoint*&gt;::iterator lit = mlpTemporalPoints.begin(), lend =  mlpTemporalPoints.end(); lit!=lend; lit++)</span><br><span class="line">&#123;</span><br><span class="line">    MapPoint* pMP = *lit;</span><br><span class="line">    <span class="keyword">delete</span> pMP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里不仅仅是清除mlpTemporalPoints，通过delete pMP还删除了指针指向的MapPoint</span></span><br><span class="line">mlpTemporalPoints.clear();</span><br></pre></td></tr></table></figure><ul><li>4.检测（NeedNewKeyFrame()）并插入关键帧CreateNewKeyFrame()</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤2.6：检测并插入关键帧，对于双目会产生新的MapPoints</span></span><br><span class="line"><span class="keyword">if</span>(NeedNewKeyFrame())</span><br><span class="line">    CreateNewKeyFrame();</span><br></pre></td></tr></table></figure><ul><li>6.保存最新一帧的数据mLastFrame = Frame(mCurrentFrame);</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(!mCurrentFrame.mpReferenceKF)</span><br><span class="line">        mCurrentFrame.mpReferenceKF = mpReferenceKF;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存上一帧的数据</span></span><br><span class="line">    mLastFrame = Frame(mCurrentFrame);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>7.记录位姿信息，用于轨迹复现<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Store frame pose information to retrieve the complete camera trajectory afterwards.</span></span><br><span class="line"><span class="keyword">if</span>(!mCurrentFrame.mTcw.empty())</span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat Tcr = mCurrentFrame.mTcw*mCurrentFrame.mpReferenceKF-&gt;GetPoseInverse();</span><br><span class="line">    mlRelativeFramePoses.push_back(Tcr);</span><br><span class="line">    mlpReferences.push_back(mpReferenceKF);</span><br><span class="line">    mlFrameTimes.push_back(mCurrentFrame.mTimeStamp);</span><br><span class="line">    mlbLost.push_back(mState==LOST);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// This can happen if tracking is lost</span></span><br><span class="line">    mlRelativeFramePoses.push_back(mlRelativeFramePoses.back());</span><br><span class="line">    mlpReferences.push_back(mlpReferences.back());</span><br><span class="line">    mlFrameTimes.push_back(mlFrameTimes.back());</span><br><span class="line">    mlbLost.push_back(mState==LOST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bool-Tracking-TrackLocalMap"><a href="#bool-Tracking-TrackLocalMap" class="headerlink" title="bool Tracking::TrackLocalMap()"></a>bool Tracking::TrackLocalMap()</h4>投影，从已经生成的地图点中找到更多对应关系</li><li>1.更新Covisibility Graph， 更新局部关键帧 </li><li>2.根据局部关键帧，更新局部地图点，接下来运行过滤函数 isInFrustum </li><li>3.将地图点投影到当前帧上，超出图像范围的舍弃</li><li>4.当前视线方向v和地图点云平均视线方向n, 舍弃n*v&lt;cos(60)的点云</li><li>5.舍弃地图点到相机中心距离不在一定阈值内的点 </li><li>6.计算图像的尺度因子 isInFrustum 函数结束 </li><li>7.进行非线性最小二乘优化 </li><li>8.更新地图点的统计量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Tracking::TrackLocalMap()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// We have an estimation of the camera pose and some map points tracked in the frame.</span></span><br><span class="line">    <span class="comment">// We retrieve the local map and try to find matches to points in the local map.</span></span><br><span class="line">    <span class="comment">// Update Local KeyFrames and Local Points</span></span><br><span class="line">    <span class="comment">// 步骤1：更新局部关键帧mvpLocalKeyFrames和局部地图点mvpLocalMapPoints</span></span><br><span class="line"> </span><br><span class="line">    UpdateLocalMap();</span><br><span class="line">    <span class="comment">// 步骤2：在局部地图中查找与当前帧匹配的MapPoints</span></span><br><span class="line">    SearchLocalPoints();</span><br><span class="line">    <span class="comment">// Optimize Pos</span></span><br><span class="line">    <span class="comment">// 在这个函数之前，在Relocalization、TrackReferenceKeyFrame、TrackWithMotionModel中都有位姿优化，</span></span><br><span class="line">    <span class="comment">// 步骤3：更新局部所有MapPoints后对位姿再次优化</span></span><br><span class="line">    Optimizer::PoseOptimization(&amp;mCurrentFrame);</span><br><span class="line">    mnMatchesInliers = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Update MapPoints Statistics</span></span><br><span class="line">    <span class="comment">// 步骤3：更新当前帧的MapPoints被观测程度，并统计跟踪局部地图的效果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 由于当前帧的MapPoints可以被当前帧观测到，其被观测统计量加1</span></span><br><span class="line">            <span class="keyword">if</span>(!mCurrentFrame.mvbOutlier[i])</span><br><span class="line">            &#123;</span><br><span class="line">                mCurrentFrame.mvpMapPoints[i]-&gt;IncreaseFound();</span><br><span class="line">                <span class="keyword">if</span>(!mbOnlyTracking)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 该MapPoint被其它关键帧观测到过</span></span><br><span class="line">                    <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i]-&gt;Observations()&gt;<span class="number">0</span>)</span><br><span class="line">                        mnMatchesInliers++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// 记录当前帧跟踪到的MapPoints，用于统计跟踪效果</span></span><br><span class="line">                    mnMatchesInliers++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mSensor==System::STEREO)</span><br><span class="line">                mCurrentFrame.mvpMapPoints[i] = <span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Decide if the tracking was succesful</span></span><br><span class="line">    <span class="comment">//More restrictive if there was a relocalization recently</span></span><br><span class="line">    <span class="comment">// 步骤4：决定是否跟踪成功</span></span><br><span class="line">    <span class="keyword">if</span>(mCurrentFrame.mnId&lt;mnLastRelocFrameId+mMaxFrames &amp;&amp; mnMatchesInliers&lt;<span class="number">50</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(mnMatchesInliers&lt;<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="void-Tracking-UpdateLocalMap"><a href="#void-Tracking-UpdateLocalMap" class="headerlink" title="void Tracking::UpdateLocalMap()"></a>void Tracking::UpdateLocalMap()</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Tracking::UpdateLocalMap()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// This is for visualization</span></span><br><span class="line">    <span class="comment">// 这行程序放在UpdateLocalPoints函数后面是不是好一些</span></span><br><span class="line">    mpMap-&gt;SetReferenceMapPoints(mvpLocalMapPoints);</span><br><span class="line">    <span class="comment">// Update</span></span><br><span class="line">    <span class="comment">// 更新局部关键帧和局部MapPoints</span></span><br><span class="line">    UpdateLocalKeyFrames();</span><br><span class="line">    UpdateLocalPoints();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="void-Tracking-UpdateLocalKeyFrames"><a href="#void-Tracking-UpdateLocalKeyFrames" class="headerlink" title="void Tracking::UpdateLocalKeyFrames()"></a>void Tracking::UpdateLocalKeyFrames()</h6><p>遍历当前帧的MapPoints，将观测到这些MapPoints的关键帧和相邻的关键帧取出，更新mvpLocalKeyFrames<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 更新局部关键帧，called by UpdateLocalMap()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 遍历当前帧的MapPoints，将观测到这些MapPoints的关键帧和相邻的关键帧取出，更新mvpLocalKeyFrames</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> Tracking::UpdateLocalKeyFrames()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Each map point vote for the keyframes in which it has been observed</span></span><br><span class="line">    <span class="comment">// 步骤1：遍历当前帧的MapPoints，记录所有能观测到当前帧MapPoints的关键帧</span></span><br><span class="line">    <span class="built_in">map</span>&lt;KeyFrame*,<span class="keyword">int</span>&gt; keyframeCounter;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i])</span><br><span class="line">        &#123;</span><br><span class="line">            MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];</span><br><span class="line">            <span class="keyword">if</span>(!pMP-&gt;isBad())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 能观测到当前帧MapPoints的关键帧</span></span><br><span class="line">                <span class="keyword">const</span> <span class="built_in">map</span>&lt;KeyFrame*,<span class="keyword">size_t</span>&gt; observations = pMP-&gt;GetObservations();</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">map</span>&lt;KeyFrame*,<span class="keyword">size_t</span>&gt;::const_iterator it=observations.begin(), itend=observations.end(); it!=itend; it++)</span><br><span class="line">                    keyframeCounter[it-&gt;first]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mCurrentFrame.mvpMapPoints[i]=<span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(keyframeCounter.empty())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">    KeyFrame* pKFmax= <span class="keyword">static_cast</span>&lt;KeyFrame*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 步骤2：更新局部关键帧（mvpLocalKeyFrames），添加局部关键帧有三个策略</span></span><br><span class="line">    <span class="comment">// 先清空局部关键帧</span></span><br><span class="line">    mvpLocalKeyFrames.clear();</span><br><span class="line">    mvpLocalKeyFrames.reserve(<span class="number">3</span>*keyframeCounter.size());</span><br><span class="line">    <span class="comment">// All keyframes that observe a map point are included in the local map. Also check which keyframe shares most points</span></span><br><span class="line">    <span class="comment">// V-D K1: shares the map points with current frame</span></span><br><span class="line">    <span class="comment">// 策略1：能观测到当前帧MapPoints的关键帧作为局部关键帧</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;KeyFrame*,<span class="keyword">int</span>&gt;::const_iterator it=keyframeCounter.begin(), itEnd=keyframeCounter.end(); it!=itEnd; it++)</span><br><span class="line">    &#123;</span><br><span class="line">        KeyFrame* pKF = it-&gt;first;</span><br><span class="line">        <span class="keyword">if</span>(pKF-&gt;isBad())</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second&gt;max)</span><br><span class="line">        &#123;</span><br><span class="line">            max=it-&gt;second;</span><br><span class="line">            pKFmax=pKF;</span><br><span class="line">        &#125;</span><br><span class="line">        mvpLocalKeyFrames.push_back(it-&gt;first);</span><br><span class="line">        <span class="comment">// mnTrackReferenceForFrame防止重复添加局部关键帧</span></span><br><span class="line">        pKF-&gt;mnTrackReferenceForFrame = mCurrentFrame.mnId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Include also some not-already-included keyframes that are neighbors to already-included keyframes</span></span><br><span class="line">    <span class="comment">// V-D K2: neighbors to K1 in the covisibility graph</span></span><br><span class="line">    <span class="comment">// 策略2：与策略1得到的局部关键帧共视程度很高的关键帧作为局部关键帧</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;KeyFrame*&gt;::const_iterator itKF=mvpLocalKeyFrames.begin(), itEndKF=mvpLocalKeyFrames.end(); itKF!=itEndKF; itKF++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Limit the number of keyframes</span></span><br><span class="line">        <span class="keyword">if</span>(mvpLocalKeyFrames.size()&gt;<span class="number">80</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        KeyFrame* pKF = *itKF;</span><br><span class="line">        <span class="comment">// 策略2.1:最佳共视的10帧</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">vector</span>&lt;KeyFrame*&gt; vNeighs = pKF-&gt;GetBestCovisibilityKeyFrames(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;KeyFrame*&gt;::const_iterator itNeighKF=vNeighs.begin(), itEndNeighKF=vNeighs.end(); itNeighKF!=itEndNeighKF; itNeighKF++)</span><br><span class="line">        &#123;</span><br><span class="line">            KeyFrame* pNeighKF = *itNeighKF;</span><br><span class="line">            <span class="keyword">if</span>(!pNeighKF-&gt;isBad())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// mnTrackReferenceForFrame防止重复添加局部关键帧</span></span><br><span class="line">                <span class="keyword">if</span>(pNeighKF-&gt;mnTrackReferenceForFrame!=mCurrentFrame.mnId)</span><br><span class="line">                &#123;</span><br><span class="line">                    mvpLocalKeyFrames.push_back(pNeighKF);</span><br><span class="line">                    pNeighKF-&gt;mnTrackReferenceForFrame=mCurrentFrame.mnId;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 策略2.2:自己的子关键帧</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">set</span>&lt;KeyFrame*&gt; spChilds = pKF-&gt;GetChilds();</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">set</span>&lt;KeyFrame*&gt;::const_iterator sit=spChilds.begin(), send=spChilds.end(); sit!=send; sit++)</span><br><span class="line">        &#123;</span><br><span class="line">            KeyFrame* pChildKF = *sit;</span><br><span class="line">            <span class="keyword">if</span>(!pChildKF-&gt;isBad())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(pChildKF-&gt;mnTrackReferenceForFrame!=mCurrentFrame.mnId)</span><br><span class="line">                &#123;</span><br><span class="line">                    mvpLocalKeyFrames.push_back(pChildKF);</span><br><span class="line">                    pChildKF-&gt;mnTrackReferenceForFrame=mCurrentFrame.mnId;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 策略2.3:自己的父关键帧</span></span><br><span class="line">        KeyFrame* pParent = pKF-&gt;GetParent();</span><br><span class="line">        <span class="keyword">if</span>(pParent)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// mnTrackReferenceForFrame防止重复添加局部关键帧</span></span><br><span class="line">           <span class="keyword">if</span>(pParent-&gt;mnTrackReferenceForFrame!=mCurrentFrame.mnId)</span><br><span class="line">           &#123;</span><br><span class="line">                mvpLocalKeyFrames.push_back(pParent);</span><br><span class="line">                pParent-&gt;mnTrackReferenceForFrame=mCurrentFrame.mnId;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// V-D Kref： shares the most map points with current frame</span></span><br><span class="line">    <span class="comment">// 步骤3：更新当前帧的参考关键帧，与自己共视程度最高的关键帧作为参考关键帧</span></span><br><span class="line">    <span class="keyword">if</span>(pKFmax)</span><br><span class="line">    &#123;</span><br><span class="line">        mpReferenceKF = pKFmax;</span><br><span class="line">       mCurrentFrame.mpReferenceKF = mpReferenceKF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="void-Tracking-UpdateLocalPoints"><a href="#void-Tracking-UpdateLocalPoints" class="headerlink" title="void Tracking::UpdateLocalPoints()"></a>void Tracking::UpdateLocalPoints()</h6><p>局部关键帧mvpLocalKeyFrames的MapPoints，更新mvpLocalMapPoints<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 更新局部关键点，called by UpdateLocalMap()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 局部关键帧mvpLocalKeyFrames的MapPoints，更新mvpLocalMapPoints</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> Tracking::UpdateLocalPoints()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 步骤1：清空局部MapPoints</span></span><br><span class="line">    mvpLocalMapPoints.clear();</span><br><span class="line">    <span class="comment">// 步骤2：遍历局部关键帧mvpLocalKeyFrames</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;KeyFrame*&gt;::const_iterator itKF=mvpLocalKeyFrames.begin(), itEndKF=mvpLocalKeyFrames.end(); itKF!=itEndKF; itKF++)</span><br><span class="line">    &#123;</span><br><span class="line">        KeyFrame* pKF = *itKF;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">vector</span>&lt;MapPoint*&gt; vpMPs = pKF-&gt;GetMapPointMatches();</span><br><span class="line">        <span class="comment">// 步骤2：将局部关键帧的MapPoints添加到mvpLocalMapPoints</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;MapPoint*&gt;::const_iterator itMP=vpMPs.begin(), itEndMP=vpMPs.end(); itMP!=itEndMP; itMP++)</span><br><span class="line">        &#123;</span><br><span class="line">           MapPoint* pMP = *itMP;</span><br><span class="line">            <span class="keyword">if</span>(!pMP)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// mnTrackReferenceForFrame防止重复添加局部MapPoint</span></span><br><span class="line">            <span class="keyword">if</span>(pMP-&gt;mnTrackReferenceForFrame==mCurrentFrame.mnId)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!pMP-&gt;isBad())</span><br><span class="line">            &#123;</span><br><span class="line">                mvpLocalMapPoints.push_back(pMP);</span><br><span class="line">                pMP-&gt;mnTrackReferenceForFrame=mCurrentFrame.mnId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="void-Tracking-SearchLocalPoints"><a href="#void-Tracking-SearchLocalPoints" class="headerlink" title="void Tracking::SearchLocalPoints()"></a>void Tracking::SearchLocalPoints()</h5><p>在局部地图中查找在当前帧视野范围内的点，将视野范围内的点和当前帧的特征点进行投影匹配</p><blockquote><p>1.遍历当前帧的mvpMapPoints，标记这些MapPoints不参与之后的搜索<br>2.将所有局部MapPoints投影到当前帧，判断是否在视野范围内，然后进行投影匹配<br>3.对于双目或rgbd摄像头，为当前帧生成新的MapPoints</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Tracking::SearchLocalPoints()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do not search map points already matched</span></span><br><span class="line">    <span class="comment">// 步骤1：遍历当前帧的mvpMapPoints，标记这些MapPoints不参与之后的搜索</span></span><br><span class="line">    <span class="comment">// 因为当前的mvpMapPoints一定在当前帧的视野中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;MapPoint*&gt;::iterator vit=mCurrentFrame.mvpMapPoints.begin(), vend=mCurrentFrame.mvpMapPoints.end(); vit!=vend; vit++)</span><br><span class="line">    &#123;</span><br><span class="line">        MapPoint* pMP = *vit;</span><br><span class="line">        <span class="keyword">if</span>(pMP)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pMP-&gt;isBad())</span><br><span class="line">            &#123;</span><br><span class="line">                *vit = <span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 更新能观测到该点的帧数加1</span></span><br><span class="line">                pMP-&gt;IncreaseVisible();</span><br><span class="line">                <span class="comment">// 标记该点被当前帧观测到</span></span><br><span class="line">                pMP-&gt;mnLastFrameSeen = mCurrentFrame.mnId;</span><br><span class="line">                <span class="comment">// 标记该点将来不被投影，因为已经匹配过</span></span><br><span class="line">                pMP-&gt;mbTrackInView = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> nToMatch=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Project points in frame and check its visibility</span></span><br><span class="line">    <span class="comment">// 步骤2：将所有局部MapPoints投影到当前帧，判断是否在视野范围内，然后进行投影匹配</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;MapPoint*&gt;::iterator vit=mvpLocalMapPoints.begin(), vend=mvpLocalMapPoints.end(); vit!=vend; vit++)</span><br><span class="line">    &#123;</span><br><span class="line">        MapPoint* pMP = *vit;</span><br><span class="line">        <span class="comment">// 已经被当前帧观测到MapPoint不再判断是否能被当前帧观测到</span></span><br><span class="line">        <span class="keyword">if</span>(pMP-&gt;mnLastFrameSeen == mCurrentFrame.mnId)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(pMP-&gt;isBad())</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// Project (this fills MapPoint variables for matching)</span></span><br><span class="line">        <span class="comment">// 步骤2.1：判断LocalMapPoints中的点是否在在视野内</span></span><br><span class="line">        <span class="keyword">if</span>(mCurrentFrame.isInFrustum(pMP,<span class="number">0.5</span>))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 观测到该点的帧数加1，该MapPoint在某些帧的视野范围内</span></span><br><span class="line">            pMP-&gt;IncreaseVisible();</span><br><span class="line">            <span class="comment">// 只有在视野范围内的MapPoints才参与之后的投影匹配</span></span><br><span class="line">            nToMatch++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nToMatch&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">ORBmatcher <span class="title">matcher</span><span class="params">(<span class="number">0.8</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> th = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(mSensor==System::RGBD)</span><br><span class="line">            th=<span class="number">3</span>;</span><br><span class="line">        <span class="comment">// If the camera has been relocalised recently, perform a coarser search</span></span><br><span class="line">        <span class="comment">// 如果不久前进行过重定位，那么进行一个更加宽泛的搜索，阈值需要增大</span></span><br><span class="line">        <span class="keyword">if</span>(mCurrentFrame.mnId&lt;mnLastRelocFrameId+<span class="number">2</span>)</span><br><span class="line">            th=<span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 步骤2.2：对视野范围内的MapPoints通过投影进行特征点匹配</span></span><br><span class="line">        matcher.SearchByProjection(mCurrentFrame,mvpLocalMapPoints,th);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bool-Tracking-NeedNewKeyFrame"><a href="#bool-Tracking-NeedNewKeyFrame" class="headerlink" title="bool Tracking::NeedNewKeyFrame()"></a>bool Tracking::NeedNewKeyFrame()</h4><p>判断是否需要生成新的关键帧，确定关键帧的标准</p><blockquote><ul><li>1.在上一次进行重定位之后，过了20帧数据，或关键帧数小于20个，不满足不能生成</li><li>2.在上一个关键帧插入之后，过了20帧，或局部建图是空闲状态，不满足不能生成。</li><li>3.当前帧跟踪到大于若干个点，不满足不能生成</li><li>4.当前帧的跟踪点数小于90%的参考关键帧跟踪点数，并且当前帧跟踪点数大于15，不满足不能生成</li><li>5.初始化后跟踪失败,重新Reset</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Tracking::NeedNewKeyFrame()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 步骤1：如果用户在界面上选择重定位，那么将不插入关键帧</span></span><br><span class="line">    <span class="comment">// 由于插入关键帧过程中会生成MapPoint，因此用户选择重定位后地图上的点云和关键帧都不会再增加</span></span><br><span class="line">    <span class="keyword">if</span>(mbOnlyTracking)<span class="comment">//如果仅跟踪，不选关键帧</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//If Local Mapping is freezed by a Loop Closure do not insert keyframes</span></span><br><span class="line">    <span class="comment">// 如果局部地图被闭环检测使用，则不插入关键帧</span></span><br><span class="line">    <span class="keyword">if</span>(mpLocalMapper-&gt;isStopped() || mpLocalMapper-&gt;stopRequested())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nKFs = mpMap-&gt;KeyFramesInMap();<span class="comment">//关键帧数</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Do not insert keyframes if not enough frames have passed from last relocalisation</span></span><br><span class="line">    <span class="comment">// 步骤2：判断是否距离上一次插入关键帧的时间太短</span></span><br><span class="line">    <span class="comment">// mCurrentFrame.mnId是当前帧的ID</span></span><br><span class="line">    <span class="comment">// mnLastRelocFrameId是最近一次重定位帧的ID</span></span><br><span class="line">    <span class="comment">// mMaxFrames等于图像输入的帧率</span></span><br><span class="line">    <span class="comment">// 如果关键帧比较少，则考虑插入关键帧</span></span><br><span class="line">    <span class="comment">// 或距离上一次重定位超过1s，则考虑插入关键帧</span></span><br><span class="line">    <span class="keyword">if</span>(mCurrentFrame.mnId&lt;mnLastRelocFrameId+mMaxFrames &amp;&amp; nKFs&gt;mMaxFrames)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Tracked MapPoints in the reference keyframe</span></span><br><span class="line">    <span class="comment">// 步骤3：得到参考关键帧跟踪到的MapPoints数量</span></span><br><span class="line">    <span class="comment">// 在UpdateLocalKeyFrames函数中会将与当前关键帧共视程度最高的关键帧设定为当前帧的参考关键帧</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> nMinObs = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(nKFs&lt;=<span class="number">2</span>)</span><br><span class="line">        nMinObs=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> nRefMatches = mpReferenceKF-&gt;TrackedMapPoints(nMinObs);<span class="comment">//获取参考关键帧跟踪到的MapPoints数量</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Local Mapping accept keyframes?</span></span><br><span class="line">    <span class="comment">// 步骤4：查询局部地图管理器是否繁忙</span></span><br><span class="line">    <span class="keyword">bool</span> bLocalMappingIdle = mpLocalMapper-&gt;AcceptKeyFrames();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Stereo &amp; RGB-D: Ratio of close "matches to map"/"total matches"</span></span><br><span class="line">    <span class="comment">//双目和RGBD：比率接近地图匹配数/总匹配数</span></span><br><span class="line">    <span class="comment">// "total matches = matches to map + visual odometry matches"</span></span><br><span class="line">    <span class="comment">//总匹配数=地图匹配数+视觉里程计匹配数</span></span><br><span class="line">    <span class="comment">// Visual odometry matches will become MapPoints if we insert a keyframe.</span></span><br><span class="line">    <span class="comment">// This ratio measures how many MapPoints we could create if we insert a keyframe.</span></span><br><span class="line">    <span class="comment">//这个比率测量如果我们插入一个关键帧，我们可以创建多少个MapPoints</span></span><br><span class="line">    <span class="comment">// 步骤5：对于双目或RGBD摄像头，统计总的可以添加的MapPoints数量和跟踪到地图中的MapPoints数量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> nMap = <span class="number">0</span>;<span class="comment">//地图匹配数</span></span><br><span class="line">    <span class="keyword">int</span> nTotal= <span class="number">0</span>;<span class="comment">//总匹配数</span></span><br><span class="line">    <span class="keyword">if</span>(mSensor!=System::MONOCULAR)<span class="comment">// 双目或rgbd</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)<span class="comment">//遍历当前帧所有匹配点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mCurrentFrame.mvDepth[i]&gt;<span class="number">0</span> &amp;&amp; mCurrentFrame.mvDepth[i]&lt;mThDepth)<span class="comment">//map点的速度在合理范围内</span></span><br><span class="line">            &#123;</span><br><span class="line">                nTotal++;<span class="comment">// 总的可以添加mappoints数</span></span><br><span class="line">                <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i])</span><br><span class="line">                    <span class="keyword">if</span>(mCurrentFrame.mvpMapPoints[i]-&gt;Observations()&gt;<span class="number">0</span>)<span class="comment">//mappoint能被观测</span></span><br><span class="line">                        nMap++;<span class="comment">// 被关键帧观测到的mappoints数，即观测到地图中的MapPoints数量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// There are no visual odometry matches in the monocular case</span></span><br><span class="line">        nMap=<span class="number">1</span>;</span><br><span class="line">        nTotal=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> ratioMap = (<span class="keyword">float</span>)nMap/(<span class="keyword">float</span>)(<span class="built_in">std</span>::max(<span class="number">1</span>,nTotal));</span><br><span class="line">    <span class="comment">// 步骤6：决策是否需要插入关键帧</span></span><br><span class="line">    <span class="comment">// Thresholds</span></span><br><span class="line">    <span class="comment">// 设定inlier阈值，和之前帧特征点匹配的inlier比例</span></span><br><span class="line">    <span class="keyword">float</span> thRefRatio = <span class="number">0.75f</span>;</span><br><span class="line">    <span class="keyword">if</span>(nKFs&lt;<span class="number">2</span>)</span><br><span class="line">        thRefRatio = <span class="number">0.4f</span>;<span class="comment">// 关键帧只有一帧，那么插入关键帧的阈值设置很低</span></span><br><span class="line">    <span class="keyword">if</span>(mSensor==System::MONOCULAR)</span><br><span class="line">        thRefRatio = <span class="number">0.9f</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// MapPoints中和地图关联的比例阈值</span></span><br><span class="line">    <span class="keyword">float</span> thMapRatio = <span class="number">0.35f</span>;</span><br><span class="line">    <span class="keyword">if</span>(mnMatchesInliers&gt;<span class="number">300</span>)</span><br><span class="line">        thMapRatio = <span class="number">0.20f</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Condition 1a: More than "MaxFrames" have passed from last keyframe insertion</span></span><br><span class="line">    <span class="comment">// 很长时间没有插入关键帧</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> c1a = mCurrentFrame.mnId&gt;=mnLastKeyFrameId+mMaxFrames;</span><br><span class="line">    <span class="comment">// Condition 1b: More than "MinFrames" have passed and Local Mapping is idle</span></span><br><span class="line">    <span class="comment">// localMapper处于空闲状态</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> c1b = (mCurrentFrame.mnId&gt;=mnLastKeyFrameId+mMinFrames &amp;&amp; bLocalMappingIdle);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Condition 1c: tracking is weak</span></span><br><span class="line">    <span class="comment">// 跟踪要跪的节奏，0.25和0.3是一个比较低的阈值</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> c1c =  mSensor!=System::MONOCULAR &amp;&amp; (mnMatchesInliers&lt;nRefMatches*<span class="number">0.25</span> || ratioMap&lt;<span class="number">0.3f</span>) ;</span><br><span class="line">    <span class="comment">// Condition 2: Few tracked points compared to reference keyframe. Lots of visual odometry compared to map matches.</span></span><br><span class="line">    <span class="comment">// 阈值比c1c要高，与之前参考帧（最近的一个关键帧）重复度不是太高</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> c2 = ((mnMatchesInliers&lt;nRefMatches*thRefRatio || ratioMap&lt;thMapRatio) &amp;&amp; mnMatchesInliers&gt;<span class="number">15</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((c1a||c1b||c1c)&amp;&amp;c2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If the mapping accepts keyframes, insert keyframe.</span></span><br><span class="line">        <span class="comment">// Otherwise send a signal to interrupt BA</span></span><br><span class="line">        <span class="comment">//如果mapping接受关键帧，则插入关键帧，否则发送信号到中断BA</span></span><br><span class="line">        <span class="keyword">if</span>(bLocalMappingIdle)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mpLocalMapper-&gt;InterruptBA();<span class="comment">//中断BA</span></span><br><span class="line">            <span class="keyword">if</span>(mSensor!=System::MONOCULAR)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 队列里不能阻塞太多关键帧</span></span><br><span class="line">                <span class="comment">// tracking插入关键帧不是直接插入，而且先插入到mlNewKeyFrames中，</span></span><br><span class="line">                <span class="comment">// 然后localmapper再逐个pop出来插入到mspKeyFrames</span></span><br><span class="line">                <span class="keyword">if</span>(mpLocalMapper-&gt;KeyframesInQueue()&lt;<span class="number">3</span>)<span class="comment">//队列中关键帧小于3</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reset if the camera get lost soon after initialization</span></span><br><span class="line"><span class="comment">// 跟踪失败，并且relocation也没有搞定，只能重新Reset</span></span><br><span class="line"><span class="keyword">if</span>(mState==LOST)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(mpMap-&gt;KeyFramesInMap()&lt;=<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Track lost soon after initialisation, reseting..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        mpSystem-&gt;Reset();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="void-Tracking-CreateNewKeyFrame"><a href="#void-Tracking-CreateNewKeyFrame" class="headerlink" title="void Tracking::CreateNewKeyFrame()"></a>void Tracking::CreateNewKeyFrame()</h4><p>创建新的关键帧，在这里将关键帧插入了LocalMapper的候选关键帧队列，​​​​​​​这样就进入到了局部构图线程。</p><blockquote><ul><li>1.将当前帧构造成关键帧</li><li>2.将当前关键帧设置为当前帧的参考关键帧</li><li>3.对于双目或rgbd摄像头，为当前帧生成新的MapPoints</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Tracking::CreateNewKeyFrame()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!mpLocalMapper-&gt;SetNotStop(<span class="literal">true</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 步骤1：将当前帧构造成关键帧</span></span><br><span class="line">    KeyFrame* pKF = <span class="keyword">new</span> KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);</span><br><span class="line">    <span class="comment">// 步骤2：将当前关键帧设置为当前帧的参考关键帧</span></span><br><span class="line">    <span class="comment">// 在UpdateLocalKeyFrames函数中会将与当前关键帧共视程度最高的关键帧设定为当前帧的参考关键帧</span></span><br><span class="line">    mpReferenceKF = pKF;</span><br><span class="line">    mCurrentFrame.mpReferenceKF = pKF;</span><br><span class="line">    <span class="comment">// 这段代码和UpdateLastFrame中的那一部分代码功能相同</span></span><br><span class="line">    <span class="comment">// 步骤3：对于双目或rgbd摄像头，为当前帧生成新的MapPoints</span></span><br><span class="line">    <span class="keyword">if</span>(mSensor!=System::MONOCULAR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根据Tcw计算mRcw、mtcw和mRwc、mOw</span></span><br><span class="line">        mCurrentFrame.UpdatePoseMatrices();</span><br><span class="line">        <span class="comment">// We sort points by the measured depth by the stereo/RGBD sensor.</span></span><br><span class="line">        <span class="comment">// We create all those MapPoints whose depth &lt; mThDepth.</span></span><br><span class="line">        <span class="comment">// If there are less than 100 close points we create the 100 closest.</span></span><br><span class="line">        <span class="comment">// 步骤3.1：得到当前帧深度小于阈值的特征点</span></span><br><span class="line">        <span class="comment">// 创建新的MapPoint, depth &lt; mThDepth</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">float</span>,<span class="keyword">int</span>&gt; &gt; vDepthIdx;</span><br><span class="line">        vDepthIdx.reserve(mCurrentFrame.N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mCurrentFrame.N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">float</span> z = mCurrentFrame.mvDepth[i];</span><br><span class="line">            <span class="keyword">if</span>(z&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vDepthIdx.push_back(make_pair(z,i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(!vDepthIdx.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 步骤3.2：按照深度从小到大排序</span></span><br><span class="line">            sort(vDepthIdx.begin(),vDepthIdx.end());</span><br><span class="line">            <span class="comment">// 步骤3.3：将距离比较近的点包装成MapPoints</span></span><br><span class="line">            <span class="keyword">int</span> nPoints = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> j=<span class="number">0</span>; j&lt;vDepthIdx.size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">int</span> i = vDepthIdx[j].second;</span><br><span class="line">                <span class="keyword">bool</span> bCreateNew = <span class="literal">false</span>;</span><br><span class="line">                MapPoint* pMP = mCurrentFrame.mvpMapPoints[i];</span><br><span class="line">                <span class="keyword">if</span>(!pMP)</span><br><span class="line">                   bCreateNew = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pMP-&gt;Observations()&lt;<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    bCreateNew = <span class="literal">true</span>;</span><br><span class="line">                    mCurrentFrame.mvpMapPoints[i] = <span class="keyword">static_cast</span>&lt;MapPoint*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bCreateNew)</span><br><span class="line">                &#123;</span><br><span class="line">                    cv::Mat x3D = mCurrentFrame.UnprojectStereo(i);</span><br><span class="line">                    MapPoint* pNewMP = <span class="keyword">new</span> MapPoint(x3D,pKF,mpMap);</span><br><span class="line">                    <span class="comment">// 这些添加属性的操作是每次创建MapPoint后都要做的</span></span><br><span class="line">                    pNewMP-&gt;AddObservation(pKF,i);</span><br><span class="line">                    pKF-&gt;AddMapPoint(pNewMP,i);</span><br><span class="line">                    pNewMP-&gt;ComputeDistinctiveDescriptors();</span><br><span class="line">                    pNewMP-&gt;UpdateNormalAndDepth();</span><br><span class="line">                    mpMap-&gt;AddMapPoint(pNewMP);</span><br><span class="line">                    mCurrentFrame.mvpMapPoints[i]=pNewMP;</span><br><span class="line">                    nPoints++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    nPoints++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这里决定了双目和rgbd摄像头时地图点云的稠密程度</span></span><br><span class="line">                <span class="comment">// 但是仅仅为了让地图稠密直接改这些不太好，</span></span><br><span class="line">                <span class="comment">// 因为这些MapPoints会参与之后整个slam过程</span></span><br><span class="line">                <span class="keyword">if</span>(vDepthIdx[j].first&gt;mThDepth &amp;&amp; nPoints&gt;<span class="number">100</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mpLocalMapper-&gt;InsertKeyFrame(pKF);</span><br><span class="line">    mpLocalMapper-&gt;SetNotStop(<span class="literal">false</span>);</span><br><span class="line">    mnLastKeyFrameId = mCurrentFrame.mnId;</span><br><span class="line">    mpLastKeyFrame = pKF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="Tracking.cc%E7%A8%8B%E5%BA%8F%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8A%EF%BC%89https://blog.csdn.net/qq_20123207/article/details/82587130">ORB-SLAM2从理论到代码实现（六）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;整体流程图&quot;&gt;&lt;a href=&quot;#整体流程图&quot; class=&quot;headerlink&quot; title=&quot;整体流程图&quot;&gt;&lt;/a&gt;整体流程图&lt;/h1&gt;&lt;p&gt;作为ORB-SLAM2里三大线程中的第一个，Tracking线程接收传感器（摄像头）传来的每一帧，并将处理的关键帧传递给LocalMapping线程。Tracking线程其实是系统里的主线程，通过反复调用Track函数进行。&lt;br&gt;Tracking模块主要作用：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;单目地图的初始化&lt;/li&gt;
&lt;li&gt;当前帧的位姿估计&lt;/li&gt;
&lt;li&gt;当前帧的局部地图跟踪&lt;/li&gt;
&lt;li&gt;生成候选关键帧&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="ORB-SLAM2" scheme="https://xiao-hu.com.cn/categories/ORB-SLAM2/"/>
    
    
      <category term="ORB-SLAM2" scheme="https://xiao-hu.com.cn/tags/ORB-SLAM2/"/>
    
  </entry>
  
  <entry>
    <title>ORB-SLAM2——系统入口System</title>
    <link href="https://xiao-hu.com.cn/2019/11/04/ORB-SLAM2%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E5%85%A5%E5%8F%A3System/"/>
    <id>https://xiao-hu.com.cn/2019/11/04/ORB-SLAM2——系统入口System/</id>
    <published>2019-11-04T11:12:42.000Z</published>
    <updated>2019-11-04T12:58:49.176Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> <img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191104191938848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjkwNTE0MQ==,size_16,color_FFFFFF,t_70"> </p><p>在主函数中，我们创建了一个ORB_SLAM2::System的对象SLAM，这个时候就会进入到SLAM系统的主接口System.cc。这个代码是所有调用SLAM系统的主入口。</p><h1 id="system-h"><a href="#system-h" class="headerlink" title="system.h"></a>system.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">System</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Input sensor</span></span><br><span class="line">    <span class="keyword">enum</span> eSensor&#123;</span><br><span class="line">        MONOCULAR=<span class="number">0</span>,</span><br><span class="line">        STEREO=<span class="number">1</span>,</span><br><span class="line">        RGBD=<span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize the SLAM system. It launches the Local Mapping, Loop Closing and Viewer threads.</span></span><br><span class="line">    System(<span class="keyword">const</span> <span class="built_in">string</span> &amp;strVocFile, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strSettingsFile, <span class="keyword">const</span> eSensor sensor, <span class="keyword">const</span> <span class="keyword">bool</span> bUseViewer = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tracking函数:输出相机位姿</span></span><br><span class="line">    <span class="comment">// Proccess the given stereo frame. Images must be synchronized and rectified.</span></span><br><span class="line">    <span class="comment">// Input images: RGB (CV_8UC3) or grayscale (CV_8U). RGB is converted to grayscale.</span></span><br><span class="line">    <span class="comment">// Returns the camera pose (empty if tracking fails).</span></span><br><span class="line">    cv::<span class="function">Mat <span class="title">TrackStereo</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;imLeft, <span class="keyword">const</span> cv::Mat &amp;imRight, <span class="keyword">const</span> <span class="keyword">double</span> &amp;timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process the given rgbd frame. Depthmap must be registered to the RGB frame.</span></span><br><span class="line">    <span class="comment">// Input image: RGB (CV_8UC3) or grayscale (CV_8U). RGB is converted to grayscale.</span></span><br><span class="line">    <span class="comment">// Input depthmap: Float (CV_32F).</span></span><br><span class="line">    <span class="comment">// Returns the camera pose (empty if tracking fails).</span></span><br><span class="line">    cv::<span class="function">Mat <span class="title">TrackRGBD</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;im, <span class="keyword">const</span> cv::Mat &amp;depthmap, <span class="keyword">const</span> <span class="keyword">double</span> &amp;timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Proccess the given monocular frame</span></span><br><span class="line">    <span class="comment">// Input images: RGB (CV_8UC3) or grayscale (CV_8U). RGB is converted to grayscale.</span></span><br><span class="line">    <span class="comment">// Returns the camera pose (empty if tracking fails).</span></span><br><span class="line">    cv::<span class="function">Mat <span class="title">TrackMonocular</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;im, <span class="keyword">const</span> <span class="keyword">double</span> &amp;timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This stops local mapping thread (map building) and performs only camera tracking.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ActivateLocalizationMode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// This resumes local mapping thread and performs SLAM again.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DeactivateLocalizationMode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns true if there have been a big map change (loop closure, global BA)</span></span><br><span class="line">    <span class="comment">// since last call to this function</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">MapChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset the system (clear map)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// All threads will be requested to finish.</span></span><br><span class="line">    <span class="comment">// It waits until all threads have finished.</span></span><br><span class="line">    <span class="comment">// This function must be called before saving the trajectory.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save camera trajectory in the TUM RGB-D dataset format.</span></span><br><span class="line">    <span class="comment">// Only for stereo and RGB-D. This method does not work for monocular.</span></span><br><span class="line">    <span class="comment">// Call first Shutdown()</span></span><br><span class="line">    <span class="comment">// See format details at: http://vision.in.tum.de/data/datasets/rgbd-dataset</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SaveTrajectoryTUM</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save keyframe poses in the TUM RGB-D dataset format.</span></span><br><span class="line">    <span class="comment">// This method works for all sensor input.</span></span><br><span class="line">    <span class="comment">// Call first Shutdown()</span></span><br><span class="line">    <span class="comment">// See format details at: http://vision.in.tum.de/data/datasets/rgbd-dataset</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SaveKeyFrameTrajectoryTUM</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save camera trajectory in the KITTI dataset format.</span></span><br><span class="line">    <span class="comment">// Only for stereo and RGB-D. This method does not work for monocular.</span></span><br><span class="line">    <span class="comment">// Call first Shutdown()</span></span><br><span class="line">    <span class="comment">// See format details at: http://www.cvlibs.net/datasets/kitti/eval_odometry.php</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SaveTrajectoryKITTI</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Save/Load functions</span></span><br><span class="line">    <span class="comment">// SaveMap(const string &amp;filename);</span></span><br><span class="line">    <span class="comment">// LoadMap(const string &amp;filename);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Information from most recent processed frame</span></span><br><span class="line">    <span class="comment">// You can call this right after TrackMonocular (or stereo or RGBD)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetTrackingState</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;MapPoint*&gt; GetTrackedMapPoints();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::KeyPoint&gt; GetTrackedKeyPointsUn();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Input sensor</span></span><br><span class="line">    eSensor mSensor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ORB vocabulary used for place recognition and feature matching.</span></span><br><span class="line">    ORBVocabulary* mpVocabulary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KeyFrame database for place recognition (relocalization and loop detection).</span></span><br><span class="line">    KeyFrameDatabase* mpKeyFrameDatabase;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map structure that stores the pointers to all KeyFrames and MapPoints.</span></span><br><span class="line">    Map* mpMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tracker. It receives a frame and computes the associated camera pose.</span></span><br><span class="line">    <span class="comment">// It also decides when to insert a new keyframe, create some new MapPoints and</span></span><br><span class="line">    <span class="comment">// performs relocalization if tracking fails.</span></span><br><span class="line">    Tracking* mpTracker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Local Mapper. It manages the local map and performs local bundle adjustment.</span></span><br><span class="line">    LocalMapping* mpLocalMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop Closer. It searches loops with every new keyframe. If there is a loop it performs</span></span><br><span class="line">    <span class="comment">// a pose graph optimization and full bundle adjustment (in a new thread) afterwards.</span></span><br><span class="line">    LoopClosing* mpLoopCloser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The viewer draws the map and the current camera pose. It uses Pangolin.</span></span><br><span class="line">    Viewer* mpViewer;</span><br><span class="line"></span><br><span class="line">    FrameDrawer* mpFrameDrawer;</span><br><span class="line">    MapDrawer* mpMapDrawer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// System threads: Local Mapping, Loop Closing, Viewer.</span></span><br><span class="line">    <span class="comment">// The Tracking thread "lives" in the main execution thread that creates the System object.</span></span><br><span class="line">    <span class="built_in">std</span>::thread* mptLocalMapping;</span><br><span class="line">    <span class="built_in">std</span>::thread* mptLoopClosing;</span><br><span class="line">    <span class="built_in">std</span>::thread* mptViewer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset flag</span></span><br><span class="line">    <span class="built_in">std</span>::mutex mMutexReset;</span><br><span class="line">    <span class="keyword">bool</span> mbReset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change mode flags</span></span><br><span class="line">    <span class="built_in">std</span>::mutex mMutexMode;</span><br><span class="line">    <span class="keyword">bool</span> mbActivateLocalizationMode;</span><br><span class="line">    <span class="keyword">bool</span> mbDeactivateLocalizationMode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tracking state</span></span><br><span class="line">    <span class="keyword">int</span> mTrackingState;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;MapPoint*&gt; mTrackedMapPoints;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::KeyPoint&gt; mTrackedKeyPointsUn;</span><br><span class="line">    <span class="built_in">std</span>::mutex mMutexState;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="构造函数ORB-SLAM2-System"><a href="#构造函数ORB-SLAM2-System" class="headerlink" title="构造函数ORB_SLAM2::System"></a>构造函数ORB_SLAM2::System</h1><blockquote><ol><li>系统参数设置文件读取</li><li>ORB词袋文件读取(txt)</li><li>创建关键帧数据库mpKeyFrameDatabase</li><li>创建地图对象mpMap</li><li>创建两个显示窗口mpFrameDrawer， mpMapDrawer</li><li>初始化Tracking对象mpTracker</li><li>初始化Local Mapping对象mpLocalMapper并发布Local Mapping线程mptLocalMapping       </li><li>初始化Loop Closing对象mpLoopCloser，并开启线程运行mptLoopClosing</li><li>初始化窗口，开启线程显示图像和地图点                    </li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//创建ORB_SLAM系统对象</span></span><br><span class="line">    <span class="comment">//ORB_SLAM2::System SLAM(argv[1],argv[2],ORB_SLAM2::System::STEREO,true);</span></span><br><span class="line">System::System(<span class="keyword">const</span> <span class="built_in">string</span> &amp;strVocFile, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strSettingsFile, <span class="keyword">const</span> eSensor sensor,</span><br><span class="line">               <span class="keyword">const</span> <span class="keyword">bool</span> bUseViewer):mSensor(sensor), mpViewer(<span class="keyword">static_cast</span>&lt;Viewer*&gt;(<span class="literal">NULL</span>)), mbReset(<span class="literal">false</span>),mbActivateLocalizationMode(<span class="literal">false</span>),</span><br><span class="line">        mbDeactivateLocalizationMode(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Output welcome message</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;</span><br><span class="line">    <span class="string">"ORB-SLAM2 Copyright (C) 2014-2016 Raul Mur-Artal, University of Zaragoza."</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;</span><br><span class="line">    <span class="string">"This program comes with ABSOLUTELY NO WARRANTY;"</span> &lt;&lt; <span class="built_in">endl</span>  &lt;&lt;</span><br><span class="line">    <span class="string">"This is free software, and you are welcome to redistribute it"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;</span><br><span class="line">    <span class="string">"under certain conditions. See LICENSE.txt."</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input sensor was set to: "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mSensor==MONOCULAR)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Monocular"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mSensor==STEREO)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Stereo"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mSensor==RGBD)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"RGB-D"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Check settings file</span></span><br><span class="line">    <span class="comment">//1.读取参数文件，内参、帧率、基线、深度, XXX.yaml</span></span><br><span class="line">    cv::<span class="function">FileStorage <span class="title">fsSettings</span><span class="params">(strSettingsFile.c_str(), cv::FileStorage::READ)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fsSettings.isOpened())</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to open settings file at: "</span> &lt;&lt; strSettingsFile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Load ORB Vocabulary</span></span><br><span class="line">    <span class="comment">//2.下载ORB词袋  .txt</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Loading ORB Vocabulary. This could take a while..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    mpVocabulary = <span class="keyword">new</span> ORBVocabulary();</span><br><span class="line">    <span class="keyword">bool</span> bVocLoad = mpVocabulary-&gt;loadFromTextFile(strVocFile);</span><br><span class="line">    <span class="keyword">if</span>(!bVocLoad)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Wrong path to vocabulary. "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Falied to open at: "</span> &lt;&lt; strVocFile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Vocabulary loaded!"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create KeyFrame Database</span></span><br><span class="line">    <span class="comment">//3.创建关键帧数据库</span></span><br><span class="line">    mpKeyFrameDatabase = <span class="keyword">new</span> KeyFrameDatabase(*mpVocabulary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create the Map</span></span><br><span class="line">    <span class="comment">//4.创建地图</span></span><br><span class="line">    mpMap = <span class="keyword">new</span> Map();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create Drawers. These are used by the Viewer</span></span><br><span class="line">    <span class="comment">//创建两个显示窗口</span></span><br><span class="line">    mpFrameDrawer = <span class="keyword">new</span> FrameDrawer(mpMap);</span><br><span class="line">    mpMapDrawer = <span class="keyword">new</span> MapDrawer(mpMap, strSettingsFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Initialize the Tracking thread</span></span><br><span class="line">    <span class="comment">//5.1初始化 Tracking</span></span><br><span class="line">    <span class="comment">//(it will live in the main thread of execution, the one that called this constructor)</span></span><br><span class="line">    mpTracker = <span class="keyword">new</span> Tracking(<span class="keyword">this</span>, mpVocabulary, mpFrameDrawer, mpMapDrawer,</span><br><span class="line">                             mpMap, mpKeyFrameDatabase, strSettingsFile, mSensor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Initialize the Local Mapping thread and launch</span></span><br><span class="line">    <span class="comment">//5.2初始化并发布 Local Mapping 线程</span></span><br><span class="line">    mpLocalMapper = <span class="keyword">new</span> LocalMapping(mpMap, mSensor==MONOCULAR);</span><br><span class="line">    mptLocalMapping = <span class="keyword">new</span> thread(&amp;ORB_SLAM2::LocalMapping::Run,mpLocalMapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Initialize the Loop Closing thread and launch</span></span><br><span class="line">    <span class="comment">//5.3初始化并发布 Loop Closing 线程</span></span><br><span class="line">    mpLoopCloser = <span class="keyword">new</span> LoopClosing(mpMap, mpKeyFrameDatabase, mpVocabulary, mSensor!=MONOCULAR);</span><br><span class="line">    mptLoopClosing = <span class="keyword">new</span> thread(&amp;ORB_SLAM2::LoopClosing::Run, mpLoopCloser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Initialize the Viewer thread and launch</span></span><br><span class="line">    <span class="comment">//5.4初始化并发布 Viewer 线程</span></span><br><span class="line">    <span class="comment">//初始化窗口，开启线程显示图像和地图点</span></span><br><span class="line">    <span class="keyword">if</span>(bUseViewer)</span><br><span class="line">    &#123;</span><br><span class="line">        mpViewer = <span class="keyword">new</span> Viewer(<span class="keyword">this</span>, mpFrameDrawer,mpMapDrawer,mpTracker,strSettingsFile);</span><br><span class="line">        mptViewer = <span class="keyword">new</span> thread(&amp;Viewer::Run, mpViewer);</span><br><span class="line">        mpTracker-&gt;SetViewer(mpViewer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Set pointers between threads</span></span><br><span class="line">    mpTracker-&gt;SetLocalMapper(mpLocalMapper);</span><br><span class="line">    mpTracker-&gt;SetLoopClosing(mpLoopCloser);</span><br><span class="line"></span><br><span class="line">    mpLocalMapper-&gt;SetTracker(mpTracker);</span><br><span class="line">    mpLocalMapper-&gt;SetLoopCloser(mpLoopCloser);</span><br><span class="line"></span><br><span class="line">    mpLoopCloser-&gt;SetTracker(mpTracker);</span><br><span class="line">    mpLoopCloser-&gt;SetLocalMapper(mpLocalMapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="System-TrackStereo"><a href="#System-TrackStereo" class="headerlink" title="System::TrackStereo"></a>System::TrackStereo</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat System::TrackStereo(<span class="keyword">const</span> cv::Mat &amp;imLeft, <span class="keyword">const</span> cv::Mat &amp;imRight, <span class="keyword">const</span> <span class="keyword">double</span> &amp;timestamp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(mSensor!=STEREO)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"ERROR: you called TrackStereo but input sensor was not set to STEREO."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check mode change</span></span><br><span class="line">    &#123;</span><br><span class="line">        unique_lock&lt;mutex&gt; lock(mMutexMode);</span><br><span class="line">        <span class="keyword">if</span>(mbActivateLocalizationMode)</span><br><span class="line">        &#123;</span><br><span class="line">            mpLocalMapper-&gt;RequestStop();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Wait until Local Mapping has effectively stopped</span></span><br><span class="line">            <span class="keyword">while</span>(!mpLocalMapper-&gt;isStopped())</span><br><span class="line">            &#123;</span><br><span class="line">                usleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mpTracker-&gt;InformOnlyTracking(<span class="literal">true</span>);</span><br><span class="line">            mbActivateLocalizationMode = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mbDeactivateLocalizationMode)</span><br><span class="line">        &#123;</span><br><span class="line">            mpTracker-&gt;InformOnlyTracking(<span class="literal">false</span>);</span><br><span class="line">            mpLocalMapper-&gt;Release();</span><br><span class="line">            mbDeactivateLocalizationMode = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check reset</span></span><br><span class="line">    &#123;</span><br><span class="line">    unique_lock&lt;mutex&gt; lock(mMutexReset);</span><br><span class="line">    <span class="keyword">if</span>(mbReset)</span><br><span class="line">    &#123;</span><br><span class="line">        mpTracker-&gt;Reset();</span><br><span class="line">        mbReset = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv::Mat Tcw = mpTracker-&gt;GrabImageStereo(imLeft,imRight,timestamp);</span><br><span class="line"></span><br><span class="line">    unique_lock&lt;mutex&gt; lock2(mMutexState);</span><br><span class="line">    mTrackingState = mpTracker-&gt;mState;</span><br><span class="line">    mTrackedMapPoints = mpTracker-&gt;mCurrentFrame.mvpMapPoints;</span><br><span class="line">    mTrackedKeyPointsUn = mpTracker-&gt;mCurrentFrame.mvKeysUn;</span><br><span class="line">    <span class="keyword">return</span> Tcw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="System-SaveTrajectoryKITTI"><a href="#System-SaveTrajectoryKITTI" class="headerlink" title="System::SaveTrajectoryKITTI"></a>System::SaveTrajectoryKITTI</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> System::SaveTrajectoryKITTI(<span class="keyword">const</span> <span class="built_in">string</span> &amp;filename)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Saving camera trajectory to "</span> &lt;&lt; filename &lt;&lt; <span class="string">" ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(mSensor==MONOCULAR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"ERROR: SaveTrajectoryKITTI cannot be used for monocular."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;KeyFrame*&gt; vpKFs = mpMap-&gt;GetAllKeyFrames();<span class="comment">//获得所有关键帧</span></span><br><span class="line">    sort(vpKFs.begin(),vpKFs.end(),KeyFrame::lId);<span class="comment">//对关键帧排序，闭环检测后第一关键帧可能就不在起始位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Transform all keyframes so that the first keyframe is at the origin.</span></span><br><span class="line">    <span class="comment">// After a loop closure the first keyframe might not be at the origin.</span></span><br><span class="line">    cv::Mat Two = vpKFs[<span class="number">0</span>]-&gt;GetPoseInverse();<span class="comment">//获得第一帧相对于世界坐标系的位姿</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有帧</span></span><br><span class="line">    ofstream f;</span><br><span class="line">    f.open(filename.c_str());</span><br><span class="line">    f &lt;&lt; fixed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Frame pose is stored relative to its reference keyframe (which is optimized by BA and pose graph).</span></span><br><span class="line">    <span class="comment">// We need to get first the keyframe pose and then concatenate the relative transformation.</span></span><br><span class="line">    <span class="comment">// Frames not localized (tracking failure) are not saved.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// For each frame we have a reference keyframe (lRit), the timestamp (lT) and a flag</span></span><br><span class="line">    <span class="comment">// which is true when tracking failed (lbL).</span></span><br><span class="line">    <span class="built_in">list</span>&lt;ORB_SLAM2::KeyFrame*&gt;::iterator lRit = mpTracker-&gt;mlpReferences.begin();<span class="comment">//参考关键帧迭代器</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">double</span>&gt;::iterator lT = mpTracker-&gt;mlFrameTimes.begin();<span class="comment">//时间戳迭代器</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">list</span>&lt;cv::Mat&gt;::iterator lit=mpTracker-&gt;mlRelativeFramePoses.begin(), lend=mpTracker-&gt;mlRelativeFramePoses.end();lit!=lend;lit++, lRit++, lT++)</span><br><span class="line">    &#123;</span><br><span class="line">        ORB_SLAM2::KeyFrame* pKF = *lRit;</span><br><span class="line"></span><br><span class="line">        cv::Mat Trw = cv::Mat::eye(<span class="number">4</span>,<span class="number">4</span>,CV_32F);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//追踪成功但是关键帧不好，则获取当前关键帧相对于上一帧的位姿，并将上一帧设为关键帧，依次不断的判断关键帧的质量，直到选取合适的关键帧</span></span><br><span class="line">        <span class="keyword">while</span>(pKF-&gt;isBad())</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//  cout &lt;&lt; "bad parent" &lt;&lt; endl;</span></span><br><span class="line">            Trw = Trw*pKF-&gt;mTcp;</span><br><span class="line">            pKF = pKF-&gt;GetParent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Trw = Trw*pKF-&gt;GetPose()*Two;<span class="comment">//将关键帧的位姿乘第一帧相对于世界坐标的位姿得到关键帧相对于世界坐标的位姿</span></span><br><span class="line"></span><br><span class="line">        cv::Mat Tcw = (*lit)*Trw;<span class="comment">////在将关键帧相对于世界坐标的位姿乘当前帧相对于关键帧的位姿得到当前帧相对于世界坐标的位姿</span></span><br><span class="line">        cv::Mat Rwc = Tcw.rowRange(<span class="number">0</span>,<span class="number">3</span>).colRange(<span class="number">0</span>,<span class="number">3</span>).t();<span class="comment">//求旋转矩阵R</span></span><br><span class="line">        cv::Mat twc = -Rwc*Tcw.rowRange(<span class="number">0</span>,<span class="number">3</span>).col(<span class="number">3</span>);<span class="comment">//求平移矩阵t</span></span><br><span class="line">        <span class="comment">// 变换矩阵f</span></span><br><span class="line">        f &lt;&lt; setprecision(<span class="number">9</span>) &lt;&lt; Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>,<span class="number">0</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>,<span class="number">1</span>)  &lt;&lt; <span class="string">" "</span> &lt;&lt; Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>,<span class="number">2</span>) &lt;&lt; <span class="string">" "</span>  &lt;&lt; twc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt;</span><br><span class="line">             Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>,<span class="number">0</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>,<span class="number">1</span>)  &lt;&lt; <span class="string">" "</span> &lt;&lt; Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>,<span class="number">2</span>) &lt;&lt; <span class="string">" "</span>  &lt;&lt; twc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt;</span><br><span class="line">             Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>,<span class="number">0</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>,<span class="number">1</span>)  &lt;&lt; <span class="string">" "</span> &lt;&lt; Rwc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>,<span class="number">2</span>) &lt;&lt; <span class="string">" "</span>  &lt;&lt; twc.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f.close();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"trajectory saved!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;p&gt; &lt;img alt=&quot;在这里插入图片描述&quot; data-src=&quot;https://img-blog.csdnimg.cn/20191104191938848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjkwNTE0MQ==,size_16,color_FFFFFF,t_70&quot;&gt;
 &lt;/p&gt;&lt;p&gt;在主函数中，我们创建了一个ORB_SLAM2::System的对象SLAM，这个时候就会进入到SLAM系统的主接口System.cc。这个代码是所有调用SLAM系统的主入口。&lt;/p&gt;&lt;h1 id=&quot;system-h&quot;&gt;&lt;a href=&quot;#system-h&quot; class=&quot;headerlink&quot; title=&quot;system.h&quot;&gt;&lt;/a&gt;system.h&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;System&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Input sensor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; eSensor&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MONOCULAR=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        STEREO=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RGBD=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Initialize the SLAM system. It launches the Local Mapping, Loop Closing and Viewer threads.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;strVocFile, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;strSettingsFile, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; eSensor sensor, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; bUseViewer = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Tracking函数:输出相机位姿&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Proccess the given stereo frame. Images must be synchronized and rectified.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Input images: RGB (CV_8UC3) or grayscale (CV_8U). RGB is converted to grayscale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Returns the camera pose (empty if tracking fails).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cv::&lt;span class=&quot;function&quot;&gt;Mat &lt;span class=&quot;title&quot;&gt;TrackStereo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cv::Mat &amp;amp;imLeft, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cv::Mat &amp;amp;imRight, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &amp;amp;timestamp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Process the given rgbd frame. Depthmap must be registered to the RGB frame.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Input image: RGB (CV_8UC3) or grayscale (CV_8U). RGB is converted to grayscale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Input depthmap: Float (CV_32F).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Returns the camera pose (empty if tracking fails).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cv::&lt;span class=&quot;function&quot;&gt;Mat &lt;span class=&quot;title&quot;&gt;TrackRGBD&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cv::Mat &amp;amp;im, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cv::Mat &amp;amp;depthmap, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &amp;amp;timestamp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Proccess the given monocular frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Input images: RGB (CV_8UC3) or grayscale (CV_8U). RGB is converted to grayscale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Returns the camera pose (empty if tracking fails).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cv::&lt;span class=&quot;function&quot;&gt;Mat &lt;span class=&quot;title&quot;&gt;TrackMonocular&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cv::Mat &amp;amp;im, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &amp;amp;timestamp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This stops local mapping thread (map building) and performs only camera tracking.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActivateLocalizationMode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This resumes local mapping thread and performs SLAM again.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DeactivateLocalizationMode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Returns true if there have been a big map change (loop closure, global BA)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// since last call to this function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MapChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Reset the system (clear map)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// All threads will be requested to finish.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// It waits until all threads have finished.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This function must be called before saving the trajectory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shutdown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Save camera trajectory in the TUM RGB-D dataset format.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Only for stereo and RGB-D. This method does not work for monocular.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Call first Shutdown()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// See format details at: http://vision.in.tum.de/data/datasets/rgbd-dataset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SaveTrajectoryTUM&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;filename)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Save keyframe poses in the TUM RGB-D dataset format.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This method works for all sensor input.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Call first Shutdown()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// See format details at: http://vision.in.tum.de/data/datasets/rgbd-dataset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SaveKeyFrameTrajectoryTUM&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;filename)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Save camera trajectory in the KITTI dataset format.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Only for stereo and RGB-D. This method does not work for monocular.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Call first Shutdown()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// See format details at: http://www.cvlibs.net/datasets/kitti/eval_odometry.php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SaveTrajectoryKITTI&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;filename)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Save/Load functions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// SaveMap(const string &amp;amp;filename);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// LoadMap(const string &amp;amp;filename);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Information from most recent processed frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// You can call this right after TrackMonocular (or stereo or RGBD)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetTrackingState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;MapPoint*&amp;gt; GetTrackedMapPoints();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;cv::KeyPoint&amp;gt; GetTrackedKeyPointsUn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Input sensor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eSensor mSensor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ORB vocabulary used for place recognition and feature matching.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ORBVocabulary* mpVocabulary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// KeyFrame database for place recognition (relocalization and loop detection).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeyFrameDatabase* mpKeyFrameDatabase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Map structure that stores the pointers to all KeyFrames and MapPoints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Map* mpMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Tracker. It receives a frame and computes the associated camera pose.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// It also decides when to insert a new keyframe, create some new MapPoints and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// performs relocalization if tracking fails.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tracking* mpTracker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Local Mapper. It manages the local map and performs local bundle adjustment.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LocalMapping* mpLocalMapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Loop Closer. It searches loops with every new keyframe. If there is a loop it performs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// a pose graph optimization and full bundle adjustment (in a new thread) afterwards.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LoopClosing* mpLoopCloser;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// The viewer draws the map and the current camera pose. It uses Pangolin.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Viewer* mpViewer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FrameDrawer* mpFrameDrawer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MapDrawer* mpMapDrawer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// System threads: Local Mapping, Loop Closing, Viewer.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// The Tracking thread &quot;lives&quot; in the main execution thread that creates the System object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread* mptLocalMapping;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread* mptLoopClosing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread* mptViewer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Reset flag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex mMutexReset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; mbReset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Change mode flags&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex mMutexMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; mbActivateLocalizationMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; mbDeactivateLocalizationMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Tracking state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mTrackingState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;MapPoint*&amp;gt; mTrackedMapPoints;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;cv::KeyPoint&amp;gt; mTrackedKeyPointsUn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex mMutexState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ORB-SLAM2" scheme="https://xiao-hu.com.cn/categories/ORB-SLAM2/"/>
    
    
      <category term="ORB-SLAM2" scheme="https://xiao-hu.com.cn/tags/ORB-SLAM2/"/>
    
  </entry>
  
  <entry>
    <title>ORB-SLAM2——整体框架</title>
    <link href="https://xiao-hu.com.cn/2019/11/04/ORB-SLAM2%E2%80%94%E2%80%94%E6%95%B4%E4%BD%93%E6%A1%86%E6%9E%B6/"/>
    <id>https://xiao-hu.com.cn/2019/11/04/ORB-SLAM2——整体框架/</id>
    <published>2019-11-04T11:08:34.000Z</published>
    <updated>2019-11-04T11:10:07.423Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h1><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191104184711727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjkwNTE0MQ==,size_16,color_FFFFFF,t_70"></p><p> ORB_SLAM2由3+1个平行线程组成，包括跟踪、局部建图、回环检测以及在回环检测后的全局BA优化。之所以说是3+1，因为第四个线程仅在回环检测并确认后才执行。</p><p>三个主要并行线程：<br>Tracking：寻找局部地图特征点并进行匹配，运用纯运动BA最小化重投影误差，定位每帧相机位姿。<br>Local Mapping：运用局部BA算法优化相机位姿和特征点云。<br>Loop Closing：检测回环并通过位姿图优化消除累计漂移误差。在位姿图优化后会启动第4个线程执行全局BA算法，计算整个系统最优结构和运动结果。</p><a id="more"></a><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>以双目stereo_kitti.cc这个主程序来看整个代码：</p><ol><li>首先使用LoadImages读取图片目录和时间戳文件 </li><li>创建ORB_SLAM2::System对象 </li><li>循环读取数据<br>3.1 读取图片<br>3.2 读取时间戳<br>3.3 将图片传给SLAM系统 </li><li>将相机轨线保存到硬盘中<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Usage: ./stereo_kitti path_to_vocabulary path_to_settings path_to_sequence"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Retrieve paths to images</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vstrImageLeft;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vstrImageRight;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vTimestamps;</span><br><span class="line">    LoadImages(<span class="built_in">string</span>(argv[<span class="number">3</span>]), vstrImageLeft, vstrImageRight, vTimestamps);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nImages = vstrImageLeft.size();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create SLAM system. It initializes all system threads and gets ready to process frames.</span></span><br><span class="line">    ORB_SLAM2::<span class="function">System <span class="title">SLAM</span><span class="params">(argv[<span class="number">1</span>],argv[<span class="number">2</span>],ORB_SLAM2::System::STEREO,<span class="literal">true</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Vector for tracking time statistics</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; vTimesTrack;</span><br><span class="line">    vTimesTrack.resize(nImages);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Start processing sequence ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Images in the sequence: "</span> &lt;&lt; nImages &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main loop</span></span><br><span class="line">    cv::Mat imLeft, imRight;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ni=<span class="number">0</span>; ni&lt;nImages; ni++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Read left and right images from file</span></span><br><span class="line">        imLeft = cv::imread(vstrImageLeft[ni],CV_LOAD_IMAGE_UNCHANGED);</span><br><span class="line">        imRight = cv::imread(vstrImageRight[ni],CV_LOAD_IMAGE_UNCHANGED);</span><br><span class="line">        <span class="keyword">double</span> tframe = vTimestamps[ni];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(imLeft.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Failed to load image at: "</span></span><br><span class="line">                 &lt;&lt; <span class="built_in">string</span>(vstrImageLeft[ni]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COMPILEDWITHC11</span></span><br><span class="line">        <span class="built_in">std</span>::chrono::steady_clock::time_point t1 = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="built_in">std</span>::chrono::monotonic_clock::time_point t1 = <span class="built_in">std</span>::chrono::monotonic_clock::now();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass the images to the SLAM system</span></span><br><span class="line">        SLAM.TrackStereo(imLeft,imRight,tframe);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COMPILEDWITHC11</span></span><br><span class="line">        <span class="built_in">std</span>::chrono::steady_clock::time_point t2 = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="built_in">std</span>::chrono::monotonic_clock::time_point t2 = <span class="built_in">std</span>::chrono::monotonic_clock::now();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> ttrack= <span class="built_in">std</span>::chrono::duration_cast&lt;<span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt; &gt;(t2 - t1).count();</span><br><span class="line"></span><br><span class="line">        vTimesTrack[ni]=ttrack;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Wait to load the next frame</span></span><br><span class="line">        <span class="keyword">double</span> T=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ni&lt;nImages<span class="number">-1</span>)</span><br><span class="line">            T = vTimestamps[ni+<span class="number">1</span>]-tframe;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ni&gt;<span class="number">0</span>)</span><br><span class="line">            T = tframe-vTimestamps[ni<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ttrack&lt;T)</span><br><span class="line">            usleep((T-ttrack)*<span class="number">1e6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop all threads</span></span><br><span class="line">    SLAM.Shutdown();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tracking time statistics</span></span><br><span class="line">    sort(vTimesTrack.begin(),vTimesTrack.end());</span><br><span class="line">    <span class="keyword">float</span> totaltime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ni=<span class="number">0</span>; ni&lt;nImages; ni++)</span><br><span class="line">    &#123;</span><br><span class="line">        totaltime+=vTimesTrack[ni];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"median tracking time: "</span> &lt;&lt; vTimesTrack[nImages/<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mean tracking time: "</span> &lt;&lt; totaltime/nImages &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save camera trajectory</span></span><br><span class="line">    SLAM.SaveTrajectoryKITTI(<span class="string">"CameraTrajectory.txt"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>LoadImages()函数</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadImages</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;strPathToSequence, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vstrImageLeft,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vstrImageRight, <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; &amp;vTimestamps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream fTimes;</span><br><span class="line">    <span class="built_in">string</span> strPathTimeFile = strPathToSequence + <span class="string">"/times.txt"</span>;</span><br><span class="line">    fTimes.open(strPathTimeFile.c_str());</span><br><span class="line">    <span class="keyword">while</span>(!fTimes.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//strstream类同时可以支持C风格的串流的输入输出操作</span></span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        getline(fTimes,s);</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">stringstream</span> ss;</span><br><span class="line">            ss &lt;&lt; s;<span class="comment">//输入</span></span><br><span class="line">            <span class="keyword">double</span> t;</span><br><span class="line">            ss &gt;&gt; t;<span class="comment">//输出</span></span><br><span class="line">            vTimestamps.push_back(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> strPrefixLeft = strPathToSequence + <span class="string">"/image_0/"</span>;</span><br><span class="line">    <span class="built_in">string</span> strPrefixRight = strPathToSequence + <span class="string">"/image_1/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nTimes = vTimestamps.size();</span><br><span class="line">    vstrImageLeft.resize(nTimes);<span class="comment">//改变当前使用数据的大小</span></span><br><span class="line">    vstrImageRight.resize(nTimes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nTimes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">stringstream</span> ss;</span><br><span class="line">        ss &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">6</span>) &lt;&lt; i;</span><br><span class="line">        vstrImageLeft[i] = strPrefixLeft + ss.str() + <span class="string">".png"</span>;</span><br><span class="line">        vstrImageRight[i] = strPrefixRight + ss.str() + <span class="string">".png"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://blog.csdn.net/hzy925/article/details/85488031" target="_blank" rel="noopener">ORB-SLAM2 程序解读</a><br><a href="https://blog.csdn.net/zxcqlf/article/details/80198298" target="_blank" rel="noopener">ORB-SLAM2论文解读与总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;整体框架&quot;&gt;&lt;a href=&quot;#整体框架&quot; class=&quot;headerlink&quot; title=&quot;整体框架&quot;&gt;&lt;/a&gt;整体框架&lt;/h1&gt;&lt;p&gt;&lt;img alt=&quot;在这里插入图片描述&quot; data-src=&quot;https://img-blog.csdnimg.cn/20191104184711727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjkwNTE0MQ==,size_16,color_FFFFFF,t_70&quot;&gt;&lt;/p&gt;&lt;p&gt; ORB_SLAM2由3+1个平行线程组成，包括跟踪、局部建图、回环检测以及在回环检测后的全局BA优化。之所以说是3+1，因为第四个线程仅在回环检测并确认后才执行。&lt;/p&gt;&lt;p&gt;三个主要并行线程：&lt;br&gt;Tracking：寻找局部地图特征点并进行匹配，运用纯运动BA最小化重投影误差，定位每帧相机位姿。&lt;br&gt;Local Mapping：运用局部BA算法优化相机位姿和特征点云。&lt;br&gt;Loop Closing：检测回环并通过位姿图优化消除累计漂移误差。在位姿图优化后会启动第4个线程执行全局BA算法，计算整个系统最优结构和运动结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ORB-SLAM2" scheme="https://xiao-hu.com.cn/categories/ORB-SLAM2/"/>
    
    
      <category term="ORB-SLAM2" scheme="https://xiao-hu.com.cn/tags/ORB-SLAM2/"/>
    
  </entry>
  
  <entry>
    <title>C++ 学习（1）——vector</title>
    <link href="https://xiao-hu.com.cn/2019/11/04/C-%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94vector/"/>
    <id>https://xiao-hu.com.cn/2019/11/04/C-学习（1）——vector/</id>
    <published>2019-11-04T10:18:28.000Z</published>
    <updated>2019-11-08T09:01:13.296Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、什么是vector？"><a href="#一、什么是vector？" class="headerlink" title="一、什么是vector？"></a>一、什么是vector？</h1><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。 </p><h1 id="二、容器特性"><a href="#二、容器特性" class="headerlink" title="二、容器特性"></a>二、容器特性</h1><ol><li><p>顺序序列</p><p>顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。</p></li></ol><a id="more"></a><ol><li><p>动态数组</p><p>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。操供了在序列末尾相对快速地添加/删除元素的操作。</p></li><li><p>能够感知内存分配器的（Allocator-aware）</p><p>容器使用一个内存分配器对象来动态地处理它的存储需求。</p></li></ol><h1 id="三、基本函数实现"><a href="#三、基本函数实现" class="headerlink" title="三、基本函数实现"></a>三、基本函数实现</h1><p>1.构造函数</p><blockquote><p>vector():创建一个空vector<br>   vector(int nSize):创建一个vector,元素个数为nSize<br>   vector(int nSize,const t&amp; t):创建一个vector，元素个数为nSize,且值均为t<br>   vector(const vector&amp;):复制构造函数<br>   vector(begin,end):复制[begin,end)区间内另一个数组的元素到vector中</p></blockquote><p>2.增加函数</p><blockquote><p> void push_back(const T&amp; x):向量尾部增加一个元素X<br> iterator insert(iterator it,const T&amp; x):向量中迭代器指向元素前增加一个元素x<br>     iterator insert(iterator it,int n,const T&amp; x):向量中迭代器指向元素前增加n个相同的元素x<br>     iterator insert(iterator it,const_iterator first,const_iterator last):向量中迭代器指向元素前插入另一个相同类型向量的[first,last)间的数据</p></blockquote><p>3.删除函数</p><blockquote><p>  iterator erase(iterator it):删除向量中迭代器指向元素<br>      iterator erase(iterator first,iterator last):删除向量中[first,last)中元素<br>      void pop_back():删除向量中最后一个元素<br>      void clear():清空向量中所有元素</p></blockquote><p>4.遍历函数</p><blockquote><p>   reference at(int pos):返回pos位置元素的引用<br>       reference front():返回首元素的引用<br>       reference back():返回尾元素的引用<br>       iterator begin():返回向量头指针，指向第一个元素<br>       iterator end():返回向量尾指针，指向向量最后一个元素的下一个位置<br>       reverse_iterator rbegin():反向迭代器，指向最后一个元素<br>       reverse_iterator rend():反向迭代器，指向第一个元素之前的位置</p></blockquote><p>5.判断函数</p><blockquote><p>bool empty() const:判断向量是否为空，若为空，则向量中无元素</p></blockquote><p>6.大小函数</p><blockquote><p>  int size() const:返回向量中元素的个数<br>      int capacity() const:返回当前向量张红所能容纳的最大元素值<br>      int max_size() const:返回最大可允许的vector元素数量值</p></blockquote><p>7.其他函数</p><blockquote><p>  void swap(vector&amp;):交换两个同类型向量的数据<br>      void assign(int n,const T&amp; x):设置向量中第n个元素的值为x<br>      void assign(const_iterator first,const_iterator last):向量中[first,last)中元素设置成当前向量元素</p></blockquote><p>8.看着清楚</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>push_back 在数组的最后添加一个数据</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>pop_back 去掉数组的最后一个数据</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>at 得到编号位置的数据</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>begin 得到数组头的指针</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>end 得到数组的最后一个单元+<span class="number">1</span>的指针</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>．front 得到数组头的引用</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>back 得到数组的最后一个单元的引用</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>max_size 得到<span class="type">vector</span>最大可以是多大</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>capacity 当前<span class="type">vector</span>分配的大小</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>size 当前使用数据的大小</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>resize 改变当前使用数据的大小</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>reserve 改变当前vecotr所分配空间的大小</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span>erase 删除指针指向的数据项</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>clear 清空当前的<span class="type">vector</span></span><br><span class="line"></span><br><span class="line"><span class="number">15.</span>rbegin 将<span class="type">vector</span>反转后的开始指针返回(其实就是原来的end<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">16.</span>rend 将<span class="type">vector</span>反转构的结束指针返回(其实就是原来的begin<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">17.</span>empty 判断<span class="type">vector</span>是否为空</span><br><span class="line"></span><br><span class="line"><span class="number">18.</span>swap 与另一个<span class="type">vector</span>交换数据</span><br></pre></td></tr></table></figure><h1 id="四、基本用法"><a href="#四、基本用法" class="headerlink" title="四、基本用法"></a>四、基本用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p><strong>eg：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; veci;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">veci.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (it = veci.begin(); it != veci.end(); )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*it%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">it = veci.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++it;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; veci.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; veci.at(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"========将vector值传递给其他参数，同时判断是否满足删除要求========"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itc = veci.begin();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecTemp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; veci.size(),itc!=veci.end();i++)</span><br><span class="line">&#123;</span><br><span class="line">vecTemp.push_back(veci.at(i));</span><br><span class="line"><span class="keyword">if</span> (*itc % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">itc = veci.erase(itc);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++itc;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; veci.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; veci.at(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vecTemp.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vecTemp.at(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20190903112647360.png"><br><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html" target="_blank" rel="noopener">参考：https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;一、什么是vector？&quot;&gt;&lt;a href=&quot;#一、什么是vector？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是vector？&quot;&gt;&lt;/a&gt;一、什么是vector？&lt;/h1&gt;&lt;p&gt;向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。 &lt;/p&gt;&lt;h1 id=&quot;二、容器特性&quot;&gt;&lt;a href=&quot;#二、容器特性&quot; class=&quot;headerlink&quot; title=&quot;二、容器特性&quot;&gt;&lt;/a&gt;二、容器特性&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;顺序序列&lt;/p&gt;
&lt;p&gt;顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://xiao-hu.com.cn/categories/C/"/>
    
    
  </entry>
  
</feed>
